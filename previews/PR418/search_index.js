var documenterSearchIndex = {"docs":
[{"location":"reference/Problem/#Problem-Types","page":"Problem","title":"Problem Types","text":"","category":"section"},{"location":"reference/Problem/","page":"Problem","title":"Problem","text":"This module defines a set of structures used to represent different control problems.","category":"page"},{"location":"reference/Problem/","page":"Problem","title":"Problem","text":"All problems are subtypes of the abstract type ProblemType, which provides a common interface for control problems.","category":"page"},{"location":"reference/Problem/#Supported-Problems","page":"Problem","title":"Supported Problems","text":"","category":"section"},{"location":"reference/Problem/","page":"Problem","title":"Problem","text":"EmptyProblem:     Used to construct an abstraction of a dynamical system without solving a control problem.\nOptimalControlProblem:     A reach-avoid optimal control problem defined over a finite time horizon, supporting state and transition costs.\nSafetyProblem:     A safety specification problem requiring the system to remain within a safe set for the entire time horizon.","category":"page"},{"location":"reference/Problem/","page":"Problem","title":"Problem","text":"Each of these problem types is detailed below:","category":"page"},{"location":"reference/Problem/","page":"Problem","title":"Problem","text":"Dionysos.Problem.ProblemType\nDionysos.Problem.EmptyProblem\nDionysos.Problem.OptimalControlProblem\nDionysos.Problem.SafetyProblem","category":"page"},{"location":"reference/Problem/#Dionysos.Problem.ProblemType","page":"Problem","title":"Dionysos.Problem.ProblemType","text":"ProblemType\n\nAn abstract type that represents a generic control problem.   All concrete problem types (e.g., EmptyProblem, OptimalControlProblem, SafetyProblem) should subtype ProblemType.\n\n\n\n\n\n","category":"type"},{"location":"reference/Problem/#Dionysos.Problem.EmptyProblem","page":"Problem","title":"Dionysos.Problem.EmptyProblem","text":"EmptyProblem{S, X} <: ProblemType\n\nA problem type used to construct an abstraction of a dynamical system.\n\nS: The system to abstract (continuous or discrete-time).\nX: The region of interest (e.g., a subset of the state space).\n\nThis problem encodes no control objective. It is intended for generating symbolic models that can later be reused by other solvers.\n\n\n\n\n\n","category":"type"},{"location":"reference/Problem/#Dionysos.Problem.OptimalControlProblem","page":"Problem","title":"Dionysos.Problem.OptimalControlProblem","text":"OptimalControlProblem{S, XI, XT, XC, TC, T} <: ProblemType\n\nEncodes a reach-avoid optimal control problem over a finite horizon.\n\nS: The system to control.\nXI: The initial set of states.\nXT: The target set to be reached.\nXC: A state cost function or structure.\nTC: A transition cost function or structure.\nT: The time horizon (number of allowed time steps).\n\nThis problem aims to find a control strategy that reaches the target set from the initial set, minimizing the accumulated cost over time.\n\n\n\n\n\n","category":"type"},{"location":"reference/Problem/#Dionysos.Problem.SafetyProblem","page":"Problem","title":"Dionysos.Problem.SafetyProblem","text":"SafetyProblem{S, XI, XS, T} <: ProblemType\n\nEncodes a safety control problem over a finite horizon.\n\nS: The system to control.\nXI: The initial set of states.\nXS: The safe set in which the system must remain.\nT: The time horizon (number of allowed time steps).\n\nThis problem aims to synthesize a controller that ensures the system remains within the safe set for the entire duration of the time horizon.\n\n\n\n\n\n","category":"type"},{"location":"developers/git/#Git-recommended-workflow","page":"Git","title":"Git recommended workflow","text":"","category":"section"},{"location":"developers/git/","page":"Git","title":"Git","text":"Git is very flexible and this can be a bit too much at first. This guide provides a workflow that should allow you to get things done and not lead you in any tricky situations. Moreover, it guarantees that the whole team has the same setup. This guide assumes you have already followed and completed your Set up. This guide assumes that your Github login is jdupont. Replace it by the appropriate login since that is not the case.","category":"page"},{"location":"developers/git/","page":"Git","title":"Git","text":"You can be in 2 situations:","category":"page"},{"location":"developers/git/","page":"Git","title":"Git","text":"You don't have write access to origin. If you don't know what this means, it means you are in that situation. Once you have enough mastery of Git, we might give you write access but it's best to start in this situation.\nYou have write access to origin. This means you can push directly to master which you should never do. We only give you write access when we trust that you won't mess up.","category":"page"},{"location":"developers/git/","page":"Git","title":"Git","text":"We have a master branch that contains the latest version of all merged changes. There is three master branches:","category":"page"},{"location":"developers/git/","page":"Git","title":"Git","text":"origin/master: that is the branch at https://github.com/dionysos-dev/Dionysos.jl, it is always the most up to date.\nYour local master branch: that is the state of the branch on your computer. It may be a few commits behind origin/master as they do not synchronize automatically. You can update it by following Switch to the master branch and update it.\njdupont/master: that is the branch of your fork https://github.com/jdupont/Dionysos.jl, it may be many commits behind your local master and even more commits behind origin/master but we don't care much because we won't use it so you don't have to update it. Once you have write access to origin, you care even less if that was possible.","category":"page"},{"location":"developers/git/#Workflow","page":"Git","title":"Workflow","text":"","category":"section"},{"location":"developers/git/","page":"Git","title":"Git","text":"The workflow is as follows. Your contributions should be grouped into small chunks that bring Dionysos from a working state (which is the current version of origin/master) to a new working state containing your improvements. In order to do that, you do the following for every chunk.","category":"page"},{"location":"developers/git/","page":"Git","title":"Git","text":"Switch to the master branch and update it;\nthen you Create a new branch (let's call it mybranch but it should be a new name for every new small chunk);\nthen you make your changes on your computer...\nthen you Format your code with JuliaFormatter.jl, so that the whole code has the same format; \nthen you Commit your changes, this will update your local version of mybranch;\nthen you Push your changes, this will update the version of mybranch in your fork (resp. origin) if you don't have write access) (resp. you have write access)) ; \nthen you Create a pull request on Github, note that if the code was not properly formatted, the pull request will raise an error on Github;\nthen you should receive reviews asking you to do changes. Do these changes on your computer and push them. To do that, Switch branches to mybranch then follow steps 4) and then 5) again;\nyou might need to Resolve conflicts, especially if you did not follow step 1);\nOnce your branch has been merged, Delete your branch and go back to step 1) for a new chunk.","category":"page"},{"location":"developers/git/","page":"Git","title":"Git","text":"If you want to make a change independent from the change you are currently making go back to step 1) use another branch name, say myotherbranch. Once you want to go back to the changes you were doing previously, Switch branches back to mybranch. Changing branches requires you that you have committed your changes so you should at least finish step 4) in order to do that. It's best to also have completed step 5) so that your changes are backed up in the cloud in case something happens to your computer.","category":"page"},{"location":"developers/git/#Fork-and-add-your-remote","page":"Git","title":"Fork and add your remote","text":"","category":"section"},{"location":"developers/git/","page":"Git","title":"Git","text":"These are the steps that should be done only the first time when you set up.","category":"page"},{"location":"developers/git/","page":"Git","title":"Git","text":"At first, you don't have write access, so create a fork https://github.com/jdupont/Dionysos.jl by going to https://github.com/dionysos-dev/Dionysos.jl and click on the \"Fork\" button on the top right. You should then add this as a remote as detailed below.","category":"page"},{"location":"developers/git/#VSCode","page":"Git","title":"VSCode","text":"","category":"section"},{"location":"developers/git/","page":"Git","title":"Git","text":"Switch to Source Control by pressing Ctrl+Shift+G then on the three horizontal dots on the top right of the left pane then Remote then Add remote... then enter https://github.com/jdupont/Dionysos.jl.git (replace jdupont by your Github login!) and then jdupont.","category":"page"},{"location":"developers/git/#Git-bash","page":"Git","title":"Git bash","text":"","category":"section"},{"location":"developers/git/","page":"Git","title":"Git","text":"First Start Git bash.","category":"page"},{"location":"developers/git/","page":"Git","title":"Git","text":"Then, add the remote as follows:","category":"page"},{"location":"developers/git/","page":"Git","title":"Git","text":"$ git remote add jdupont https://github.com/jdupont/Dionysos.jl.git","category":"page"},{"location":"developers/git/","page":"Git","title":"Git","text":"Your remotes should be (the order of the lines is not important):","category":"page"},{"location":"developers/git/","page":"Git","title":"Git","text":"$ git remote -v\njdupont\thttps://github.com/jdupont/Dionysos.jl.git (fetch)\njdupont\thttps://github.com/jdupont/Dionysos.jl.git (push)\norigin\thttps://github.com/dionysos-dev/Dionysos.jl.git (fetch)\norigin\thttps://github.com/dionysos-dev/Dionysos.jl.git (push)","category":"page"},{"location":"developers/git/#Switch-to-the-master-branch-and-update-it","page":"Git","title":"Switch to the master branch and update it","text":"","category":"section"},{"location":"developers/git/","page":"Git","title":"Git","text":"This should be before any new change! See Workflow.","category":"page"},{"location":"developers/git/","page":"Git","title":"Git","text":"If the procedure below fails or you get a message about a need to create a merge, it means you have commit changes to your local master branch, you did not follow the Workflow. Contact us to get help, we will be mad at you for not following the Workflow but we will still help you.","category":"page"},{"location":"developers/git/#VSCode-2","page":"Git","title":"VSCode","text":"","category":"section"},{"location":"developers/git/","page":"Git","title":"Git","text":"Click on the branch on the lower left and enter master. Now, click on the rotating arrows on the lower left at the right of master to update it.","category":"page"},{"location":"developers/git/#Git-bash-2","page":"Git","title":"Git bash","text":"","category":"section"},{"location":"developers/git/","page":"Git","title":"Git","text":"First Start Git bash.","category":"page"},{"location":"developers/git/","page":"Git","title":"Git","text":"Before you start working on something new, pull any new changes made by the team to the master branch of your computer.","category":"page"},{"location":"developers/git/","page":"Git","title":"Git","text":"$ git checkout master # Switch to the master branch of your computer\n$ git fetch origin master # Fetch the new commits of the master branch on Github\n$ git merge --ff-only origin/master # Merge the new commits into the master branch of your computer","category":"page"},{"location":"developers/git/#Create-a-new-branch","page":"Git","title":"Create a new branch","text":"","category":"section"},{"location":"developers/git/","page":"Git","title":"Git","text":"Start by Switch to the master branch and update it. Create a new branch (choose a branch name, let's suppose it is mybranch) and switch to it.","category":"page"},{"location":"developers/git/#VSCode-3","page":"Git","title":"VSCode","text":"","category":"section"},{"location":"developers/git/","page":"Git","title":"Git","text":"Click on master on the lower left and then + Create new branch... then write mybranch.","category":"page"},{"location":"developers/git/#Git-bash-3","page":"Git","title":"Git bash","text":"","category":"section"},{"location":"developers/git/","page":"Git","title":"Git","text":"First Start Git bash.","category":"page"},{"location":"developers/git/","page":"Git","title":"Git","text":"$ git branch mybranch # Creates a new branch `mybranch`\n$ git checkout mybranch # Switch to the new branch `mybranch`","category":"page"},{"location":"developers/git/#Commit-your-changes","page":"Git","title":"Commit your changes","text":"","category":"section"},{"location":"developers/git/","page":"Git","title":"Git","text":"Before doing any changes, make sure you Switch branches to the right branch (which should be mybranch). Once you have made changes, they are saved on your disc but the Git history has not been modified yet; neither your local branches nor the remote one on origin or your fork! You should first stage changes (this means selecting changes you want to commit and hence to be applied on the chunk of changes you suggest to make to Dionysos in the Pull Request) and then create the commit with a message. Usually, you want to stage every file; both the modified ones and the untracked ones because the \"untracked\" ones you don't want to add should be listed in the .gitignore file and hence should not show up. The only exception is the file docs/Project.toml since you may have changed it by adding Dionysos in Build the documentation but you don't want to push that, you want to keep these changes to your computer only.","category":"page"},{"location":"developers/git/#VSCode-4","page":"Git","title":"VSCode","text":"","category":"section"},{"location":"developers/git/","page":"Git","title":"Git","text":"Switch to Source Control by pressing Ctrl+Shift+G.","category":"page"},{"location":"developers/git/","page":"Git","title":"Git","text":"You will see the modified files with a M and the untracked files with a U. Click on the \"+\" to stage all the changes of a file. Once all files have been staged, Write a message in the field above the \"Commit\" blue button. Then press on the \"Commit\" blue button.","category":"page"},{"location":"developers/git/#Git-bash-4","page":"Git","title":"Git bash","text":"","category":"section"},{"location":"developers/git/","page":"Git","title":"Git","text":"First Start Git bash.","category":"page"},{"location":"developers/git/","page":"Git","title":"Git","text":"$ git checkout mybranch # Make sure you are not on the `master` branch!\n$ git status # Shows modified and untracked files\n$ git add foobar.jl # Stage file `foobar.jl`, replace it by the files you want to stage\n$ git commit -m \"Commit message\" # Replace \"Commit message\" by a very short message about your changes","category":"page"},{"location":"developers/git/","page":"Git","title":"Git","text":"To unstage every file, do","category":"page"},{"location":"developers/git/","page":"Git","title":"Git","text":"$ git reset","category":"page"},{"location":"developers/git/","page":"Git","title":"Git","text":"Alternatively, the following adds all modified and untracked files.","category":"page"},{"location":"developers/git/","page":"Git","title":"Git","text":"$ git add .","category":"page"},{"location":"developers/git/","page":"Git","title":"Git","text":"Another option is the following which adds all modified files and commits them directly.","category":"page"},{"location":"developers/git/","page":"Git","title":"Git","text":"$ git commit -am \"Commit message\"","category":"page"},{"location":"developers/git/#Push-your-changes","page":"Git","title":"Push your changes","text":"","category":"section"},{"location":"developers/git/#VSCode-5","page":"Git","title":"VSCode","text":"","category":"section"},{"location":"developers/git/","page":"Git","title":"Git","text":"Switch to Source Control by pressing Ctrl+Shift+G then on the three horizontal dots on the top right of the left pane then on \"push\". If it is the first time you push this branch, it will ask \"The branch mybranch has no remote branch. Would you like to publish this branch ?\"; answer with \"Ok\". Then it will ask which remote to push to, select jdupont if you don't have write access or origin if you have write access.","category":"page"},{"location":"developers/git/#Git-bash-5","page":"Git","title":"Git bash","text":"","category":"section"},{"location":"developers/git/","page":"Git","title":"Git","text":"First Start Git bash.","category":"page"},{"location":"developers/git/","page":"Git","title":"Git","text":"If you don't have write access, push to your fork:","category":"page"},{"location":"developers/git/","page":"Git","title":"Git","text":"$ git push jdupont mybranch","category":"page"},{"location":"developers/git/","page":"Git","title":"Git","text":"Otherwise, push to origin:","category":"page"},{"location":"developers/git/","page":"Git","title":"Git","text":"$ git push origin mybranch","category":"page"},{"location":"developers/git/","page":"Git","title":"Git","text":"If this fails, it means you don't have write access or that you chose a name of branch that already exists.","category":"page"},{"location":"developers/git/#Delete-your-branch","page":"Git","title":"Delete your branch","text":"","category":"section"},{"location":"developers/git/","page":"Git","title":"Git","text":"First, Switch to the master branch and update it. Otherwise, Git won't see that the branch is merged and will disallow you to delete it to avoid losing your work.","category":"page"},{"location":"developers/git/#VSCode-6","page":"Git","title":"VSCode","text":"","category":"section"},{"location":"developers/git/","page":"Git","title":"Git","text":"Switch to Source Control by pressing Ctrl+Shift+G then on the three horizontal dots on the top right of the left pane then on \"Branch\" then \"Delete Branch...\" then write or select mybranch.","category":"page"},{"location":"developers/git/#Git-bash-6","page":"Git","title":"Git bash","text":"","category":"section"},{"location":"developers/git/","page":"Git","title":"Git","text":"First Start Git bash.","category":"page"},{"location":"developers/git/","page":"Git","title":"Git","text":"$ git checkout master\n$ git branch -d mybranch","category":"page"},{"location":"developers/git/#Resolve-conflicts","page":"Git","title":"Resolve conflicts","text":"","category":"section"},{"location":"developers/git/","page":"Git","title":"Git","text":"By the time you have created new branch, other developers may have made changes to the master branch at the same lines of the same files as the changes in some of your branch. In that case, Github won't allow your pull request to be merged as it does not know whether it should take the changes of your branch or the changes of master. To fix the conflicts, start Updating the master branch and then do","category":"page"},{"location":"developers/git/","page":"Git","title":"Git","text":"$ git checkout mybranch\n$ git rebase master","category":"page"},{"location":"developers/git/","page":"Git","title":"Git","text":"The rebase will stop at every conflicting commit and you will have to, edit the conflicting files and edit parts of the file like","category":"page"},{"location":"developers/git/","page":"Git","title":"Git","text":"<<<<<<< HEAD\nchanges on master\n=======\nchanges on your branch\n>>>>>>> mybranch","category":"page"},{"location":"developers/git/","page":"Git","title":"Git","text":"and choose the changes that should be kept. Then you should git add the conflicting files, run git rebase --continue. See here for more information on this. In case you have may conflicting commits, the rebase can be tedious, you will even have to resolve conflicts for some changes in some earlier commit even if you reverted these changes in a later commit. To avoid this issue, it is recommended to first squash your commits into a single one. To do that, use","category":"page"},{"location":"developers/git/","page":"Git","title":"Git","text":"$ git rebase -i master","category":"page"},{"location":"developers/git/","page":"Git","title":"Git","text":"and replace pick by s for all commits except the top one and then follow the instructions, see here for more details.","category":"page"},{"location":"developers/git/#Switch-branches","page":"Git","title":"Switch branches","text":"","category":"section"},{"location":"developers/git/","page":"Git","title":"Git","text":"To switch to the branch mybranch, do the following.","category":"page"},{"location":"developers/git/#VSCode-7","page":"Git","title":"VSCode","text":"","category":"section"},{"location":"developers/git/","page":"Git","title":"Git","text":"On the bottom left, you should see a sort of \"Y\" symbol with empty circles at the three leaves. On the right, you see the current branch. Click on it and then write or select mybranch.","category":"page"},{"location":"developers/git/#Git-bash-7","page":"Git","title":"Git bash","text":"","category":"section"},{"location":"developers/git/","page":"Git","title":"Git","text":"First Start Git bash.","category":"page"},{"location":"developers/git/","page":"Git","title":"Git","text":"$ git checkout mybranch","category":"page"},{"location":"developers/git/#Format-your-code","page":"Git","title":"Format your code","text":"","category":"section"},{"location":"developers/git/","page":"Git","title":"Git","text":"To format your code, run the following in your Julia REPL. Make sure you have added JuliaFormatter.jl before. ","category":"page"},{"location":"developers/git/","page":"Git","title":"Git","text":"julia> using JuliaFormatter; format(\".\")","category":"page"},{"location":"reference/Symbolic/#Symbolic","page":"Symbolic","title":"Symbolic","text":"","category":"section"},{"location":"reference/Symbolic/","page":"Symbolic","title":"Symbolic","text":"This folder contains the data structures needed to encode the different abstractions.","category":"page"},{"location":"reference/Symbolic/","page":"Symbolic","title":"Symbolic","text":"Dionysos.Symbolic.SymbolicModel","category":"page"},{"location":"reference/Symbolic/#Dionysos.Symbolic.SymbolicModel","page":"Symbolic","title":"Dionysos.Symbolic.SymbolicModel","text":"Abstract Type: SymbolicModel{N, M}\n\nDefines a generic symbolic model interface, where:\n\nN is the state space dimension.\nM is the input space dimension.\n\n\n\n\n\n","category":"type"},{"location":"reference/Symbolic/","page":"Symbolic","title":"Symbolic","text":"Dionysos.Symbolic.GridBasedSymbolicModel\nDionysos.Symbolic.SymbolicModelList\nDionysos.Symbolic.LazySymbolicModelList\nDionysos.Symbolic.compute_symmodel_from_hybridcontrolsystem!","category":"page"},{"location":"reference/Symbolic/#Dionysos.Symbolic.GridBasedSymbolicModel","page":"Symbolic","title":"Dionysos.Symbolic.GridBasedSymbolicModel","text":"GridBasedSymbolicModel{N, M} <: SymbolicModel{N, M}\n\nAn intermediate abstract type for symbolic models that rely on a grid-based discretization.\n\nN: Dimension of the state space.\nM: Dimension of the input space.\n\n\n\n\n\n","category":"type"},{"location":"reference/Symbolic/#Dionysos.Symbolic.SymbolicModelList","page":"Symbolic","title":"Dionysos.Symbolic.SymbolicModelList","text":"SymbolicModelList{N, M, S1, S2, A} <: GridBasedSymbolicModel{N, M}\n\nA classical symbolic model where the entire domain is partitioned into grid cells.\n\n\n\n\n\n","category":"type"},{"location":"reference/Symbolic/#Dionysos.Symbolic.LazySymbolicModelList","page":"Symbolic","title":"Dionysos.Symbolic.LazySymbolicModelList","text":"LazySymbolicModel{N, M, S1, S2, A} <: GridBasedSymbolicModel{N, M}\n\nA symbolic model using lazy abstraction where the automaton is computed only for a subset of the state space.\n\n\n\n\n\n","category":"type"},{"location":"reference/Symbolic/#Dionysos.Symbolic.compute_symmodel_from_hybridcontrolsystem!","page":"Symbolic","title":"Dionysos.Symbolic.compute_symmodel_from_hybridcontrolsystem!","text":"compute_symmodel_from_hybridcontrolsystem!(symmodel::SymbolicModel{N}, transitionCost::AbstractDict, transitionCont::AbstractDict,\nhybridsys::AbstractHybridSystem, W, L, U, opt_sdp, opt_qp)\n\nBuilds an abstraction symmodel where the transitions have costs given in transitionCost and are parameterized by affine-feedback controllers in transitionCont. The concrete system  is hybridsys and W, L and U are defined as in _has_transition. An SDP optimizer opt_sdp and a QP optimizer opt_qp must be provided as JuMP optimizers.\n\n\n\n\n\n","category":"function"},{"location":"manual/abstraction-based-control/#Abstraction-based-control","page":"Abstraction-based control","title":"Abstraction-based control","text":"","category":"section"},{"location":"manual/abstraction-based-control/","page":"Abstraction-based control","title":"Abstraction-based control","text":"Given a mathematical description of the system dynamics and the specifications describing the desired closed-loop behavior of the system, abstraction-based control techniques involve synthesizing a correct-by-construction controller through a systematic three-step procedure. First, both the original system and the specifications are transposed into an abstract domain, resulting in an abstract system and corresponding abstract specifications. We refer to the original system as the concrete system as opposed to the abstract system. Next, an abstract controller is synthesized to solve this abstract control problem. Finally, in the third step, called concretization as opposed to abstraction, a controller for the original control problem is derived from the abstract controller.","category":"page"},{"location":"manual/abstraction-based-control/","page":"Abstraction-based control","title":"Abstraction-based control","text":"In practice, the abstract domain is constructed by discretizing the concrete state space of the concrete system into subsets (called cells). The value of this approach lies in the substitution of the concrete system (often a system with an infinite number of states) with a finite state system, which makes it possible to leverage powerful control tools from the graph-theoretic field, such as Dijkstra or the A-star algorithm. This three steps procedure is illustrated on the following figure.","category":"page"},{"location":"manual/abstraction-based-control/","page":"Abstraction-based control","title":"Abstraction-based control","text":"(Image: Abstraction-based control.)","category":"page"},{"location":"manual/abstraction-based-control/","page":"Abstraction-based control","title":"Abstraction-based control","text":"Although this approach offers a safety-critical framework, it suffers from the curse of dimensionality due to the exponential growth of the number of states with respect to the dimension. In order to render these techniques practical, it is necessary to construct smart abstractions, i.e., they differ from classical techniques in that the partitioning is designed smartly, using optimization-based design techniques, and computed iteratively, unlike the classical approach which uses an a priori defined approach, sub-optimal and subject to the curse of dimensionality. To this end, we propose solvers called lazy solvers (i.e. postponing heavier numerical operations) that co-design the abstraction and the controller to reduce the computed part of the abstraction.","category":"page"},{"location":"reference/Utils/#Utils","page":"Utils","title":"Utils","text":"","category":"section"},{"location":"reference/Utils/","page":"Utils","title":"Utils","text":"This folder contains all the auxiliary functions needed.","category":"page"},{"location":"reference/Utils/#Functions","page":"Utils","title":"Functions","text":"","category":"section"},{"location":"reference/Utils/","page":"Utils","title":"Utils","text":"Dionysos.Utils.QuadraticStateControlFunction ","category":"page"},{"location":"reference/Utils/#Dionysos.Utils.QuadraticStateControlFunction","page":"Utils","title":"Dionysos.Utils.QuadraticStateControlFunction","text":"QuadraticStateControlFunction{T, MT<:AbstractMatrix{T}}\n\nQuadratic function on state and input defined as x'Qx + u'Ru + 2x'Nu + 2x'q + 2u'r + v \n\n\n\n\n\n","category":"type"},{"location":"reference/Utils/#Search","page":"Utils","title":"Search","text":"","category":"section"},{"location":"reference/Utils/","page":"Utils","title":"Utils","text":"Dionysos.Utils.expand\nDionysos.Utils.path_cost\nDionysos.Utils.breadth_first_graph_search\nDionysos.Utils.depth_first_graph_search\nDionysos.Utils.best_first_graph_search\nDionysos.Utils.path\nDionysos.Utils.AbstractQueue\nDionysos.Utils.MyStack\nDionysos.Utils.tree_search\nDionysos.Utils.goal_test\nDionysos.Utils.astar_graph_search\nDionysos.Utils.astar_tree_search\nDionysos.Utils.breadth_first_tree_search\nDionysos.Utils.graph_search\nDionysos.Utils.best_first_tree_search\nDionysos.Utils.successor\nDionysos.Utils.Node\nDionysos.Utils.depth_first_tree_search\nDionysos.Utils.MyPriorityQueue\nDionysos.Utils.FIFOQueue\nDionysos.Utils.SearchProblem\nDionysos.Utils.BranchAndBound.Abstract_BB_Problem\nDionysos.Utils.get_min_bounding_box\nDionysos.Utils.NodeT\nDionysos.Utils.collect_children\nDionysos.Utils.RRT\nDionysos.Utils.add_node!\nDionysos.Utils.propagate_cost_to_leaves\nDionysos.Utils.get_path\nDionysos.Utils.Tree","category":"page"},{"location":"reference/Utils/#Dionysos.Utils.expand","page":"Utils","title":"Dionysos.Utils.expand","text":"Yield the nodes reachable from this node.\n\n\n\n\n\n","category":"function"},{"location":"reference/Utils/#Dionysos.Utils.path_cost","page":"Utils","title":"Dionysos.Utils.path_cost","text":"Return the cost of a solution path that arrives at state2 from state1 via action, assuming cost c to get up to state1. If the problem is such that the path doesn't matter, this function will only look at state2.  If the path does matter, it will consider c and maybe state1 and action. The default method costs 1 for every step in the path.\n\n\n\n\n\n","category":"function"},{"location":"reference/Utils/#Dionysos.Utils.breadth_first_graph_search","page":"Utils","title":"Dionysos.Utils.breadth_first_graph_search","text":"Search the shallowest nodes in the search tree first.\n\n\n\n\n\n","category":"function"},{"location":"reference/Utils/#Dionysos.Utils.depth_first_graph_search","page":"Utils","title":"Dionysos.Utils.depth_first_graph_search","text":"Search the deepest nodes in the search tree first.\n\n\n\n\n\n","category":"function"},{"location":"reference/Utils/#Dionysos.Utils.best_first_graph_search","page":"Utils","title":"Dionysos.Utils.best_first_graph_search","text":"Search the nodes with the lowest f scores first. You specify the function f(node) that you want to minimize; for example, if f is a heuristic estimate to the goal, then we have greedy best first search; if f is node.depth then we have depth-first search.\n\n\n\n\n\n","category":"function"},{"location":"reference/Utils/#Dionysos.Utils.path","page":"Utils","title":"Dionysos.Utils.path","text":"Create a list of nodes from the root to this node.\n\n\n\n\n\nCreate a list of nodes from the root to this node.\n\n\n\n\n\n","category":"function"},{"location":"reference/Utils/#Dionysos.Utils.AbstractQueue","page":"Utils","title":"Dionysos.Utils.AbstractQueue","text":"AbstractQueue is an abstract type.     There are three types:     MyStack(): A Last In First Out Queue.     FIFOQueue(): A First In First Out Queue.     MyPriorityQueue(f,ext): Queue where items are sorted by f, (default <). Each type supports the following methods and functions:     append!(q,item)  – add an item to the queue     extend!(q,items) – equivalent to: for item in items: append(q,item)     pop!(q)          – return the top item from the queue     length(q)        – number of items in q\n\n\n\n\n\n","category":"type"},{"location":"reference/Utils/#Dionysos.Utils.MyStack","page":"Utils","title":"Dionysos.Utils.MyStack","text":"Return an empty list, suitable as a Last-In-First-Out Queue.\n\n\n\n\n\n","category":"type"},{"location":"reference/Utils/#Dionysos.Utils.tree_search","page":"Utils","title":"Dionysos.Utils.tree_search","text":"Search through the successors of a problem to find a goal. The argument fringe should be an empty queue. Don't worry about repeated paths to a state.\n\n\n\n\n\n","category":"function"},{"location":"reference/Utils/#Dionysos.Utils.goal_test","page":"Utils","title":"Dionysos.Utils.goal_test","text":"Return True if the state is a goal. The default method compares the state to P.goal, as specified in the constructor. Implement this method if checking against a single goal is not enough.\n\n\n\n\n\n","category":"function"},{"location":"reference/Utils/#Dionysos.Utils.astar_graph_search","page":"Utils","title":"Dionysos.Utils.astar_graph_search","text":"A* search is best-first graph search with f(n) = g(n)+h(n). You need to specify the h function when you call astar_search.\n\n\n\n\n\n","category":"function"},{"location":"reference/Utils/#Dionysos.Utils.astar_tree_search","page":"Utils","title":"Dionysos.Utils.astar_tree_search","text":"A* search is best-first graph search with f(n) = g(n)+h(n). You need to specify the h function when you call astar_search.\n\n\n\n\n\n","category":"function"},{"location":"reference/Utils/#Dionysos.Utils.breadth_first_tree_search","page":"Utils","title":"Dionysos.Utils.breadth_first_tree_search","text":"Search the shallowest nodes in the search tree first.\n\n\n\n\n\n","category":"function"},{"location":"reference/Utils/#Dionysos.Utils.graph_search","page":"Utils","title":"Dionysos.Utils.graph_search","text":"Search through the successors of a problem to find a goal. The argument fringe should be an empty queue. If two paths reach a state, only use the best one.\n\n\n\n\n\n","category":"function"},{"location":"reference/Utils/#Dionysos.Utils.best_first_tree_search","page":"Utils","title":"Dionysos.Utils.best_first_tree_search","text":"Search the nodes with the lowest f scores first. You specify the function f(node) that you want to minimize; for example, if f is a heuristic estimate to the goal, then we have greedy best first search; if f is node.depth then we have depth-first search.\n\n\n\n\n\n","category":"function"},{"location":"reference/Utils/#Dionysos.Utils.successor","page":"Utils","title":"Dionysos.Utils.successor","text":"Given a state, return a sequence of (action, state) pairs reachable from this state. If there are many successors, consider an iterator that yields the successors one at a time, rather than building them all at once.\n\n\n\n\n\n","category":"function"},{"location":"reference/Utils/#Dionysos.Utils.Node","page":"Utils","title":"Dionysos.Utils.Node","text":"A node in a search tree. Contains a pointer to the parent (the node that this is a successor of) and to the actual state for this node. Note that if a state is arrived at by two paths, then there are two nodes with the same state. Also includes the action that got us to this state, and the total pathcost (also known as g) to reach the node. Other functions may add an f and h value; see bestfirstgraphsearch and astar_search for an explanation of how the f and h values are handled.\n\n\n\n\n\n","category":"type"},{"location":"reference/Utils/#Dionysos.Utils.depth_first_tree_search","page":"Utils","title":"Dionysos.Utils.depth_first_tree_search","text":"Search the deepest nodes in the search tree first.\n\n\n\n\n\n","category":"function"},{"location":"reference/Utils/#Dionysos.Utils.MyPriorityQueue","page":"Utils","title":"Dionysos.Utils.MyPriorityQueue","text":"A queue in which the minimum (or maximum) element (as determined by f) is returned first. Keys of type T and priorities of type V.\n\n\n\n\n\n","category":"type"},{"location":"reference/Utils/#Dionysos.Utils.FIFOQueue","page":"Utils","title":"Dionysos.Utils.FIFOQueue","text":"A First-In-First-Out Queue.\n\n\n\n\n\n","category":"type"},{"location":"reference/Utils/#Dionysos.Utils.SearchProblem","page":"Utils","title":"Dionysos.Utils.SearchProblem","text":"SearchProblem\n\nFields\n\n- `initial`  -- initial state of type `S` or a list of initial state of type `S`.\n- `goal`     -- possibly a goal state of type 'Union{Nothing,S}''.\n\nExample\n\nstruct Problem{S} <: SearchProblem{S}\n    initial::Union{S,Vector{S}}\n    goal::Union{Nothing,S}\nend\nThe constructor specifies the initial state, and possibly a goal\nstate, if there is a unique goal.\nfunction Problem(initial::S; goal=nothing) where S\n    return Problem{S}(initial,goal)\nend\n\n\n\n\n\n","category":"type"},{"location":"reference/Utils/#Dionysos.Utils.BranchAndBound.Abstract_BB_Problem","page":"Utils","title":"Dionysos.Utils.BranchAndBound.Abstract_BB_Problem","text":"Abstract_BB_Problem #abstract branch and bound problem\n\nSould implement the methods below\n\n\n\n\n\n","category":"type"},{"location":"reference/Utils/#Dionysos.Utils.get_min_bounding_box","page":"Utils","title":"Dionysos.Utils.get_min_bounding_box","text":"get_min_bounding_box(elli, optimizer)\n\nFinds the minimum bounding box containing the ellipsoid {(x-c)'P(x-c) < 1}. \n\n\n\n\n\n","category":"function"},{"location":"reference/Utils/#Dionysos.Utils.NodeT","page":"Utils","title":"Dionysos.Utils.NodeT","text":"cost: cost to reach its parent\n\n\n\n\n\n","category":"type"},{"location":"reference/Utils/#Dionysos.Utils.collect_children","page":"Utils","title":"Dionysos.Utils.collect_children","text":"Return a list with all the children of node\n\n\n\n\n\n","category":"function"},{"location":"reference/Utils/#Dionysos.Utils.RRT","page":"Utils","title":"Dionysos.Utils.RRT","text":"Basic generic RRT algorihtm\nSI : initial state (this will be the root of the tree) ;\nSF : target state that we try to reach ;\ndistance : function that defines a metric between the states ;\nrand_state : function that returns a random candidate state ;\nnew_conf : function that returns a reachable state, with the action and the cost ;\nkeep : function to filter the node that we want to add during an iteration;\nstop_crit : stop criteria ;\nRRTstar : boolean to use RRT* ;\ncompute_transition : to compute transition between to given state (if RRTstar is true).\n\n\n\n\n\n","category":"function"},{"location":"reference/Utils/#Dionysos.Utils.add_node!","page":"Utils","title":"Dionysos.Utils.add_node!","text":"add a node as a leave\n\n\n\n\n\n","category":"function"},{"location":"reference/Utils/#Dionysos.Utils.propagate_cost_to_leaves","page":"Utils","title":"Dionysos.Utils.propagate_cost_to_leaves","text":"assuming that the path_cost of a node has changed (and its depth),  we should propagate the new cost to its children\n\n\n\n\n\n","category":"function"},{"location":"reference/Utils/#Dionysos.Utils.get_path","page":"Utils","title":"Dionysos.Utils.get_path","text":"return the path from node to the root of the tree\n\n\n\n\n\n","category":"function"},{"location":"reference/Utils/#Dionysos.Utils.Tree","page":"Utils","title":"Dionysos.Utils.Tree","text":"Tree structure with\n\ncost for transitions (the cost function a non-negative function);\nan underlying metric between the states that are encapsulated in the nodes of the tree\n\n\n\n\n\n","category":"type"},{"location":"reference/Utils/#Geometric-shapes","page":"Utils","title":"Geometric shapes","text":"","category":"section"},{"location":"reference/Utils/","page":"Utils","title":"Utils","text":"Dionysos.Utils.HyperRectangle\nDionysos.Utils.DeformedRectangle","category":"page"},{"location":"reference/Utils/#Dionysos.Utils.HyperRectangle","page":"Utils","title":"Dionysos.Utils.HyperRectangle","text":"HyperRectangle{VT}\n\nDefines a hyper-rectangle using lb (lower bound) and ub (upper bound).\n\n\n\n\n\n","category":"type"},{"location":"reference/Utils/#Dionysos.Utils.DeformedRectangle","page":"Utils","title":"Dionysos.Utils.DeformedRectangle","text":"DeformedRectangle(rect, f, N, shape)\n\nA deformed rectangle.\n\n\n\n\n\n","category":"type"},{"location":"reference/Domain/#Domain","page":"Domain","title":"Domain","text":"","category":"section"},{"location":"reference/Domain/","page":"Domain","title":"Domain","text":"This folder contains structures that are used to encode different kinds of concrete and abstract domains.","category":"page"},{"location":"reference/Domain/#Concrete-continuous-domains","page":"Domain","title":"Concrete continuous domains","text":"","category":"section"},{"location":"reference/Domain/","page":"Domain","title":"Domain","text":"Dionysos.Domain.ContinuousUnboundedDomain\nDionysos.Domain.ContinuousBoundedDomain\nDionysos.Domain.ContinuousBoundedEllipsoidDomain","category":"page"},{"location":"reference/Domain/#Dionysos.Domain.ContinuousUnboundedDomain","page":"Domain","title":"Dionysos.Domain.ContinuousUnboundedDomain","text":"ContinuousUnboundedDomain{N,T}\n\nStruct for a basic unbounded continuous domain.\n\n\n\n\n\n","category":"type"},{"location":"reference/Domain/#Dionysos.Domain.ContinuousBoundedDomain","page":"Domain","title":"Dionysos.Domain.ContinuousBoundedDomain","text":"ContinuousBoundedDomain{N,T,B}\n\nStruct for a basic bounded continuous domain.\n\n\n\n\n\n","category":"type"},{"location":"reference/Domain/#Dionysos.Domain.ContinuousBoundedEllipsoidDomain","page":"Domain","title":"Dionysos.Domain.ContinuousBoundedEllipsoidDomain","text":"ContinuousBoundedEllipsoidDomain{N,T,S<:Grid{N,T}}\n\nStruct for a basic bounded continuous domain formed by a finite number of ellipsoids.\n\n\n\n\n\n","category":"type"},{"location":"reference/Domain/#Grids","page":"Domain","title":"Grids","text":"","category":"section"},{"location":"reference/Domain/","page":"Domain","title":"Domain","text":"Dionysos.Domain.Grid\nDionysos.Domain.get_pos_by_coord\nDionysos.Domain.GridFree\nDionysos.Domain.GridEllipsoidalRectangular\nDionysos.Domain.DeformedGrid\nDionysos.Domain.get_volume","category":"page"},{"location":"reference/Domain/#Dionysos.Domain.Grid","page":"Domain","title":"Dionysos.Domain.Grid","text":"abstract type Grid{N, T} end\n\nDefines an abstract type for grid-based structures in N dimensions with floating-point values T.\n\n\n\n\n\n","category":"type"},{"location":"reference/Domain/#Dionysos.Domain.get_pos_by_coord","page":"Domain","title":"Dionysos.Domain.get_pos_by_coord","text":"get_pos_by_coord(grid::Grid{N, T}, x::SVector{N, T}) -> NTuple{N, Int}\n\nReturns the discrete position (grid indices) corresponding to a coordinate x.\n\nThe cell (0,0) is centered between -h/2 and +h/2.\nh is the length of a grid cell in each dimension.\n\n\n\n\n\n","category":"function"},{"location":"reference/Domain/#Dionysos.Domain.GridFree","page":"Domain","title":"Dionysos.Domain.GridFree","text":"GridFree{N,T} <: Grid{N,T}\n\nUniform grid on unbounded space, centered at orig and with steps set by the vector h.\n\n\n\n\n\n","category":"type"},{"location":"reference/Domain/#Dionysos.Domain.GridEllipsoidalRectangular","page":"Domain","title":"Dionysos.Domain.GridEllipsoidalRectangular","text":"GridEllipsoidalRectangular{N,T} <: Grid{N,T}\n\nUniform grid on rectangular space rect, centered at orig and with steps set by the vector h. Cells are (possibly overlapping) ellipsoids defined at each grid point c as (x-c)'P(x-c) ≤ 1.\n\n\n\n\n\n","category":"type"},{"location":"reference/Domain/#Dionysos.Domain.DeformedGrid","page":"Domain","title":"Dionysos.Domain.DeformedGrid","text":"DeformedGrid{N, T} <: Grid{N, T}\n\nRepresents a deformed version of a GridFree grid, where points are mapped via an invertible transformation f and its inverse fi.\n\nFields\n\ngrid::GridFree{N, T} : The underlying grid.\nf::Function : The forward transformation (physical -> deformed).\nfi::Function : The inverse transformation (deformed -> physical).\nA::Union{Nothing, SMatrix{N, N, T, N*N}} : Optional linear transformation matrix for volume calculations.\n\n\n\n\n\n","category":"type"},{"location":"reference/Domain/#Dionysos.Domain.get_volume","page":"Domain","title":"Dionysos.Domain.get_volume","text":"get_volume(Dgrid::DeformedGrid) -> T\n\nComputes the volume of a grid cell.\n\nIf A is provided (linear transformation), uses det(A).\nOtherwise, defaults to the volume of the base grid.\n\n\n\n\n\n","category":"function"},{"location":"reference/Domain/#Abstract-domains","page":"Domain","title":"Abstract domains","text":"","category":"section"},{"location":"reference/Domain/","page":"Domain","title":"Domain","text":"Dionysos.Domain.DomainType\nDionysos.Domain.GridDomainType\nDionysos.Domain.merge_to_hyperrectangles_pos\nDionysos.Domain.merge_to_hyperrectangles_real\nDionysos.Domain.DomainList\nDionysos.Domain.PeriodicDomainList\nDionysos.Domain.has_same_periodicity\nDionysos.Domain.wrap_pos\nDionysos.Domain.wrap_coord\nDionysos.Domain.GeneralDomainList\nDionysos.Domain.RectangularObstacles\nDionysos.Domain.CustomList","category":"page"},{"location":"reference/Domain/#Dionysos.Domain.DomainType","page":"Domain","title":"Dionysos.Domain.DomainType","text":"abstract type DomainType{N, T} end\n\nGeneral abstract type for spatial domains in N dimensions with elements of type T.\n\n\n\n\n\n","category":"type"},{"location":"reference/Domain/#Dionysos.Domain.GridDomainType","page":"Domain","title":"Dionysos.Domain.GridDomainType","text":"abstract type GridDomainType{N, T} <: DomainType{N, T}\n\nAn abstract interface for grid-based domains, enforcing required methods for interaction.\n\n\n\n\n\n","category":"type"},{"location":"reference/Domain/#Dionysos.Domain.merge_to_hyperrectangles_pos","page":"Domain","title":"Dionysos.Domain.merge_to_hyperrectangles_pos","text":"merge_to_hyperrectangles_pos(domain::GridDomainType)\n\nAggregates the grid elements in GridDomainType into the largest possible hyperrectangles. Returns a list of HyperRectangles that efficiently represent the domain.\n\n\n\n\n\n","category":"function"},{"location":"reference/Domain/#Dionysos.Domain.merge_to_hyperrectangles_real","page":"Domain","title":"Dionysos.Domain.merge_to_hyperrectangles_real","text":"merge_hyperrectangles_real(domain_list::GridDomainType)\n\nUses the existing merge_to_hyperrectangles(domain_list) function to merge elements in grid positions, then converts the result into real-world HyperRectangles using get_rec(grid, pos).\n\n\n\n\n\n","category":"function"},{"location":"reference/Domain/#Dionysos.Domain.DomainList","page":"Domain","title":"Dionysos.Domain.DomainList","text":"DomainList{N,T,S<:Grid{N,T}}\n\nStruct for a basic domain based on a Grid.\n\n\n\n\n\n","category":"type"},{"location":"reference/Domain/#Dionysos.Domain.PeriodicDomainList","page":"Domain","title":"Dionysos.Domain.PeriodicDomainList","text":"PeriodicDomainList{N, T, S} <: GridDomainType{N, T}\n\nA periodic extension of DomainList, where specified dimensions wrap around at given periods.\n\nFields\n\ndomain::DomainList{N, T, S} : The underlying domain structure.\nperiodic_dims::Vector{Bool} : Boolean vector indicating which dimensions are periodic.\nperiods::SVector{N, T} : The length of the period in each dimension.\nstart::SVector{N, T} : The start of the periodic cycle in each dimension.\n\nFeatures\n\nUses DomainList for element management.\nImplements periodic boundary conditions for wrapping elements.\n\n\n\n\n\n","category":"type"},{"location":"reference/Domain/#Dionysos.Domain.has_same_periodicity","page":"Domain","title":"Dionysos.Domain.has_same_periodicity","text":"has_same_periodicity(domain1::PeriodicDomainList, domain2::PeriodicDomainList) -> Bool\n\nReturns true if both domains have the same periodic settings.\n\n\n\n\n\n","category":"function"},{"location":"reference/Domain/#Dionysos.Domain.wrap_pos","page":"Domain","title":"Dionysos.Domain.wrap_pos","text":"wrap_pos(domain::PeriodicDomainList, pos::NTuple{N, Int}) -> NTuple{N, Int}\n\nWraps a grid position pos into its equivalent within periodic boundaries.\n\nHandles periodicity correctly based on how the grid is defined.\n\n\n\n\n\n","category":"function"},{"location":"reference/Domain/#Dionysos.Domain.wrap_coord","page":"Domain","title":"Dionysos.Domain.wrap_coord","text":"wrap_coord(domain::PeriodicDomainList, coord::SVector{N, Float64}) -> SVector{N, Float64}\n\nTransforms a coordinate into its wrapped equivalent within the periodic boundaries.\n\n\n\n\n\n","category":"function"},{"location":"reference/Domain/#Dionysos.Domain.GeneralDomainList","page":"Domain","title":"Dionysos.Domain.GeneralDomainList","text":"GeneralDomainList{N,E<:AbstractSet{NTuple{N,Int}},T,S<:Grid{N,T},F} <: DomainType{N,T}\n\nStruct for a rectangular domain with rectangular obstacles.\n\n\n\n\n\n","category":"type"},{"location":"reference/Domain/#Dionysos.Domain.RectangularObstacles","page":"Domain","title":"Dionysos.Domain.RectangularObstacles","text":"RectangularObstacles{VT} <: AbstractSet{VT}\n\nStruct for a rectangular domain with rectangular obstacles.\n\n\n\n\n\n","category":"type"},{"location":"reference/Domain/#Dionysos.Domain.CustomList","page":"Domain","title":"Dionysos.Domain.CustomList","text":"CustomList{N, T} <: DomainType{N, T}\n\nA flexible, generic domain representation that stores elements as a list of SVector{N, T}.   Useful for managing discrete sets of points in an N-dimensional space.\n\n\n\n\n\n","category":"type"},{"location":"developers/setup/#Set-up","page":"Set up","title":"Set up","text":"","category":"section"},{"location":"developers/setup/","page":"Set up","title":"Set up","text":"This guide shows you what to do when you start developing for Dionysos.","category":"page"},{"location":"developers/setup/#Installations","page":"Set up","title":"Installations","text":"","category":"section"},{"location":"developers/setup/","page":"Set up","title":"Set up","text":"Start by installing Julia, VSCode and the Julia extension of VSCode as detailed here. Now, install Git by following https://git-scm.com/book/en/v2/Getting-Started-Installing-Git.","category":"page"},{"location":"developers/setup/#Launching-the-prompts","page":"Set up","title":"Launching the prompts","text":"","category":"section"},{"location":"developers/setup/","page":"Set up","title":"Set up","text":"For every step, we show both how to do it from Visual Studio Code (VSCode) or from the Julia REPL or Git bash.","category":"page"},{"location":"developers/setup/#Start-the-Julia-REPL","page":"Set up","title":"Start the Julia REPL","text":"","category":"section"},{"location":"developers/setup/","page":"Set up","title":"Set up","text":"To start a Julia REPL, type Shift+Ctrl+P and then Julia: Start REPL. You should have installed Julia and the Julia VSCode extension as detailed in Installations for this to work. You should see a prompt julia> appearing. We always show the prompt you should see for every command as well as the output, don't copy-paste the prompt nor the output.","category":"page"},{"location":"developers/setup/#Start-Julia-Pkg-prompt","page":"Set up","title":"Start Julia Pkg prompt","text":"","category":"section"},{"location":"developers/setup/","page":"Set up","title":"Set up","text":"First Start the Julia REPL. Then, by pressing the ] character you will see a (@v1.8) pkg> prompt appearing (if you are using the global environment). By pressing the backspace you will get back to the julia> prompt. We always show the prompt you should see for every command as well as the output, don't copy-paste the prompt nor the output.","category":"page"},{"location":"developers/setup/#Start-Git-bash","page":"Set up","title":"Start Git bash","text":"","category":"section"},{"location":"developers/setup/","page":"Set up","title":"Set up","text":"To start Git bash, click on the top menu of VSCode on \"View\" then \"Terminal\". On the bottom right, click on the down arrow at the right of the \"+\" and then on \"Git bash\" on the dropdown menu that appears. You should have installed Julia and the Julia VSCode extension as detailed in Installations for this to work. You should see a prompt $ appearing. We always show the prompt you should see for every command as well as the output, don't copy-paste the prompt nor the output.","category":"page"},{"location":"developers/setup/#Cloning-Dionysos","page":"Set up","title":"Cloning Dionysos","text":"","category":"section"},{"location":"developers/setup/","page":"Set up","title":"Set up","text":"The purpose of this is to clone Dionysos at the location ~/.julia/dev/Dionysos where ~ is your home folder.","category":"page"},{"location":"developers/setup/#VSCode","page":"Set up","title":"VSCode","text":"","category":"section"},{"location":"developers/setup/","page":"Set up","title":"Set up","text":"Switch to Source Control by pressing Ctrl+Shift+G then on the three horizontal dots on the top right of the left pane then \"clone\" then write https://github.com/dionysos-dev/Dionysos.jl.git and then select the folder .julia/dev. Then rename the created folder ~/.julia/dev/Dionysos into ~/.julia/dev/Dionysos using your file manager.","category":"page"},{"location":"developers/setup/#Julia-REPL","page":"Set up","title":"Julia REPL","text":"","category":"section"},{"location":"developers/setup/","page":"Set up","title":"Set up","text":"See Start the Julia REPL.","category":"page"},{"location":"developers/setup/","page":"Set up","title":"Set up","text":"julia> using Pkg; Pkg.develop(url=\"https://github.com/dionysos-dev/Dionysos.jl.git\")","category":"page"},{"location":"developers/setup/#Julia-Pkg-prompt","page":"Set up","title":"Julia Pkg prompt","text":"","category":"section"},{"location":"developers/setup/","page":"Set up","title":"Set up","text":"See Start Julia Pkg prompt.","category":"page"},{"location":"developers/setup/","page":"Set up","title":"Set up","text":"(@v1.8) pkg> dev https://github.com/dionysos-dev/Dionysos.jl.git","category":"page"},{"location":"developers/setup/#Install-the-Revise.jl-and-JuliaFormatter.jl-packages","page":"Set up","title":"Install the Revise.jl and JuliaFormatter.jl packages","text":"","category":"section"},{"location":"developers/setup/","page":"Set up","title":"Set up","text":"Revise.jl reduces the need to restart your Julia REPL when you make changes in the source code. JuliaFormatter.jl allows to format your code following the rules stated in .JuliaFormatter.toml.","category":"page"},{"location":"developers/setup/","page":"Set up","title":"Set up","text":"We install these two packages in the global environment so that it is available from all the environments.","category":"page"},{"location":"developers/setup/#Julia-REPL-2","page":"Set up","title":"Julia REPL","text":"","category":"section"},{"location":"developers/setup/","page":"Set up","title":"Set up","text":"See Start the Julia REPL.","category":"page"},{"location":"developers/setup/","page":"Set up","title":"Set up","text":"julia> using Pkg; Pkg.add(\"Revise\"); Pkg.add(\"JuliaFormatter\")","category":"page"},{"location":"developers/setup/#Julia-Pkg-prompt-2","page":"Set up","title":"Julia Pkg prompt","text":"","category":"section"},{"location":"developers/setup/","page":"Set up","title":"Set up","text":"See Start Julia Pkg prompt.","category":"page"},{"location":"developers/setup/","page":"Set up","title":"Set up","text":"(@v1.8) pkg> add Revise\n(@v1.8) pkg> add JuliaFormatter","category":"page"},{"location":"developers/setup/#Open-Dionysos","page":"Set up","title":"Open Dionysos","text":"","category":"section"},{"location":"developers/setup/","page":"Set up","title":"Set up","text":"In VSCode, do File/Open Folder.../ and select the folder .julia/dev/Dionysos inside your home directory. Before doing any changes, make sure to Switch to the master branch and update it; see Workflow.","category":"page"},{"location":"developers/setup/#Build-the-documentation","page":"Set up","title":"Build the documentation","text":"","category":"section"},{"location":"developers/setup/","page":"Set up","title":"Set up","text":"To build the documentation, start by activating the documentation environment and using the Dionysos version in development. Start by ] to enter the package environment:","category":"page"},{"location":"developers/setup/","page":"Set up","title":"Set up","text":"(@v1.7) pkg> activate docs\n  Activating project at `~/.julia/dev/Dionysos/docs`\n\n(docs) pkg> dev .\n   Resolving package versions...\n  No Changes to `~/.julia/dev/Dionysos/docs/Project.toml`\n  No Changes to `~/.julia/dev/Dionysos/docs/Manifest.toml`","category":"page"},{"location":"developers/setup/","page":"Set up","title":"Set up","text":"Once in a while you can also update with","category":"page"},{"location":"developers/setup/","page":"Set up","title":"Set up","text":"(docs) pkg> up\n    Updating registry at `~/.julia/registries/General`\n    Updating git-repo `https://github.com/JuliaRegistries/General.git`\n  No Changes to `~/.julia/dev/Dionysos/docs/Project.toml`\n  No Changes to `~/.julia/dev/Dionysos/docs/Manifest.toml`","category":"page"},{"location":"developers/setup/","page":"Set up","title":"Set up","text":"If you plan to change the documentation, it might be a good idea to use Revise (see Install the Revise.jl and JuliaFormatter.jl packages):","category":"page"},{"location":"developers/setup/","page":"Set up","title":"Set up","text":"julia> using Revise","category":"page"},{"location":"developers/setup/","page":"Set up","title":"Set up","text":"If you don't plan to test the examples, comment out the Literate part in docs/make.jl:","category":"page"},{"location":"developers/setup/","page":"Set up","title":"Set up","text":" 20 # for example in EXAMPLES_SOLVERS\n 21 #     literate_actions(joinpath(EXAMPLES_SOLVERS_DIR, example), OUTPUT_DIR)\n 22 # end\n 23 # for example in EXAMPLES_UTILS\n 24 #     literate_actions(joinpath(EXAMPLES_UTILS_DIR, example), OUTPUT_DIR)\n 25 # end\n 26 # literate_actions(joinpath(@__DIR__, \"src\", \"Getting Started.jl\"), OUTPUT_DIR)","category":"page"},{"location":"developers/setup/","page":"Set up","title":"Set up","text":"This will speed up building the documentation quite a lot.","category":"page"},{"location":"developers/setup/","page":"Set up","title":"Set up","text":"Now, build the documentation with:","category":"page"},{"location":"developers/setup/","page":"Set up","title":"Set up","text":"julia> include(\"docs/make.jl\")","category":"page"},{"location":"developers/setup/","page":"Set up","title":"Set up","text":"To view it, open the file docs/build/index.html with your web browser.","category":"page"},{"location":"reference/System/#System-Representations-and-Approximations","page":"System","title":"System Representations and Approximations","text":"","category":"section"},{"location":"reference/System/","page":"System","title":"System","text":"This module defines tools to represent and manipulate dynamical systems and their approximations.","category":"page"},{"location":"reference/System/#Concrete-Systems","page":"System","title":"Concrete Systems","text":"","category":"section"},{"location":"reference/System/","page":"System","title":"System","text":"The systems we aim to control are defined using types from external packages such as:","category":"page"},{"location":"reference/System/","page":"System","title":"System","text":"MathematicalSystems.jl for standard (e.g., continuous/discrete-time) control systems.\nHybridSystems.jl for hybrid automata.","category":"page"},{"location":"reference/System/","page":"System","title":"System","text":"For example, a continuous-time system might be defined as:","category":"page"},{"location":"reference/System/","page":"System","title":"System","text":"concrete_system = MathematicalSystems.ConstrainedBlackBoxControlContinuousSystem(\n    dynamics(),  # system dynamics (function)\n    n_X,         # state dimension\n    n_U,         # input dimension\n    _X_,         # state constraints\n    _U_          # input constraints\n)","category":"page"},{"location":"reference/System/#Symbolic/Abstract-Systems","page":"System","title":"Symbolic/Abstract Systems","text":"","category":"section"},{"location":"reference/System/","page":"System","title":"System","text":"Symbolic models (used for abstraction-based control) are constructed separately using the symbolic abstraction module, typically resulting in a SymbolicModelList.","category":"page"},{"location":"reference/System/#System-Approximations","page":"System","title":"System Approximations","text":"","category":"section"},{"location":"reference/System/","page":"System","title":"System","text":"To reason about the system’s behavior during abstraction, we introduce approximations of the system's evolution. These are grouped into:","category":"page"},{"location":"reference/System/","page":"System","title":"System","text":"DiscreteTimeSystemApproximation\nContinuousTimeSystemApproximation","category":"page"},{"location":"reference/System/","page":"System","title":"System","text":"Both are subtypes of SystemApproximation, and can represent either underapproximations or overapproximations of the system dynamics.","category":"page"},{"location":"reference/System/","page":"System","title":"System","text":"Dionysos.System.SystemApproximation\nDionysos.System.DiscreteTimeSystemApproximation\nDionysos.System.ContinuousTimeSystemApproximation","category":"page"},{"location":"reference/System/#Dionysos.System.SystemApproximation","page":"System","title":"Dionysos.System.SystemApproximation","text":"SystemApproximation\n\nAbstract supertype for all system approximation types.  \n\n\n\n\n\n","category":"type"},{"location":"reference/System/#Dionysos.System.DiscreteTimeSystemApproximation","page":"System","title":"Dionysos.System.DiscreteTimeSystemApproximation","text":"DiscreteTimeSystemApproximation <: SystemApproximation\n\nAbstract supertype for approximations of discrete-time systems.  \n\n\n\n\n\n","category":"type"},{"location":"reference/System/#Dionysos.System.ContinuousTimeSystemApproximation","page":"System","title":"Dionysos.System.ContinuousTimeSystemApproximation","text":"ContinuousTimeSystemApproximation <: SystemApproximation\n\nAbstract supertype for approximations of continuous-time systems.\n\n\n\n\n\n","category":"type"},{"location":"reference/System/","page":"System","title":"System","text":"The following functions define the SystemApproximation interface:","category":"page"},{"location":"reference/System/","page":"System","title":"System","text":"get_system(approx::SystemApproximation): Returns the underlying concrete system.\nis_continuous_time(approx): Returns true if the approximation is continuous-time, i.e., a ContinuousTimeSystemApproximation.\nis_over_approximation(approx::SystemApproximation): Return true if approx is a DiscreteTimeSystemOverApproximation or a ContinuousTimeSystemOverApproximation.\ndiscretize(approx::ContinuousTimeSystemApproximation, tstep)::DiscreteTimeSystemApproximation: Returns a  DiscreteTimeSystemApproximation with given time step.\nget_system_map(approx): Returns the map representing the system's evolution.","category":"page"},{"location":"reference/System/#Underapproximations","page":"System","title":"Underapproximations","text":"","category":"section"},{"location":"reference/System/","page":"System","title":"System","text":"These approximations guarantee that all returned trajectories are feasible under the system dynamics.","category":"page"},{"location":"reference/System/","page":"System","title":"System","text":"Dionysos.System.DiscreteTimeSystemUnderApproximation\nDionysos.System.ContinuousTimeSystemUnderApproximation","category":"page"},{"location":"reference/System/#Dionysos.System.DiscreteTimeSystemUnderApproximation","page":"System","title":"Dionysos.System.DiscreteTimeSystemUnderApproximation","text":"DiscreteTimeSystemUnderApproximation <: DiscreteTimeSystemApproximation\n\nAn abstract type representing an underapproximation of a discrete-time system.  \n\n\n\n\n\n","category":"type"},{"location":"reference/System/#Dionysos.System.ContinuousTimeSystemUnderApproximation","page":"System","title":"Dionysos.System.ContinuousTimeSystemUnderApproximation","text":"ContinuousTimeSystemUnderApproximation <: ContinuousTimeSystemApproximation\n\nAn abstract type representing an underapproximation of a continuous-time system.  \n\n\n\n\n\n","category":"type"},{"location":"reference/System/","page":"System","title":"System","text":"The following function define the underapproximation interface:","category":"page"},{"location":"reference/System/","page":"System","title":"System","text":"Dionysos.System.get_under_approximation_map","category":"page"},{"location":"reference/System/#Dionysos.System.get_under_approximation_map","page":"System","title":"Dionysos.System.get_under_approximation_map","text":"get_under_approximation_map(approx::DiscreteTimeSystemUnderApproximation) -> Function\n\nReturns a function that computes the underapproximation (list of points) of the system's evolution:     f(rect::UT.HyperRectangle{N,T}, u::SVector{M,T}) -> SVector{N,T}[]\n\n\n\n\n\nget_under_approximation_map(approx::ContinuousTimeSystemUnderApproximation) -> Function\n\nReturns a function that computes the underapproximation (list of points) of the system's evolution:     f(rect::UT.HyperRectangle{N,T}, u::SVector{M,T}, tstep::T) -> SVector{N,T}[]\n\n\n\n\n\n","category":"function"},{"location":"reference/System/#Overapproximations","page":"System","title":"Overapproximations","text":"","category":"section"},{"location":"reference/System/","page":"System","title":"System","text":"These approximations guarantee that the true system evolution is contained in the returned set, making them useful for safety and robust control.","category":"page"},{"location":"reference/System/","page":"System","title":"System","text":"Dionysos.System.DiscreteTimeSystemOverApproximation\nDionysos.System.ContinuousTimeSystemOverApproximation","category":"page"},{"location":"reference/System/#Dionysos.System.DiscreteTimeSystemOverApproximation","page":"System","title":"Dionysos.System.DiscreteTimeSystemOverApproximation","text":"DiscreteTimeSystemOverApproximation <: DiscreteTimeSystemApproximation\n\nAn abstract type representing an overapproximation of a discrete-time system.  \n\n\n\n\n\n","category":"type"},{"location":"reference/System/#Dionysos.System.ContinuousTimeSystemOverApproximation","page":"System","title":"Dionysos.System.ContinuousTimeSystemOverApproximation","text":"ContinuousTimeSystemOverApproximation <: ContinuousTimeSystemApproximation\n\nAn abstract type representing an overapproximation of a continuous-time system.\n\n\n\n\n\n","category":"type"},{"location":"reference/System/","page":"System","title":"System","text":"The following function define the overapproximation interface:","category":"page"},{"location":"reference/System/","page":"System","title":"System","text":"Dionysos.System.get_over_approximation_map","category":"page"},{"location":"reference/System/#Dionysos.System.get_over_approximation_map","page":"System","title":"Dionysos.System.get_over_approximation_map","text":"get_over_approximation_map(approx::DiscreteTimeSystemOverApproximation) -> Function\n\nReturns a function that computes the overapproximation of the system's evolution:     f(rect::UT.HyperRectangle{N,T}, u::SVector{M,T}) -> UT.HyperRectangle{N,T}\n\n\n\n\n\nget_over_approximation_map(overApprox::ContinuousTimeSystemOverApproximation) -> Function\n\nReturns a function that computes the overapproximation of the system's evolution:     f(rect::UT.HyperRectangle{N,T}, u::SVector{M,T}, tstep::T) -> UT.HyperRectangle{N,T}\n\n\n\n\n\n","category":"function"},{"location":"reference/System/#Concrete-implementations-of-abstract-approximation-types","page":"System","title":"Concrete implementations of abstract approximation types","text":"","category":"section"},{"location":"reference/System/","page":"System","title":"System","text":"Dionysos.System.DiscreteTimeCenteredSimulation\nDionysos.System.ContinuousTimeCenteredSimulation","category":"page"},{"location":"reference/System/#Dionysos.System.DiscreteTimeCenteredSimulation","page":"System","title":"Dionysos.System.DiscreteTimeCenteredSimulation","text":"DiscreteTimeCenteredSimulation <: DiscreteTimeSystemUnderApproximation\n\nA concrete underapproximation that simulates the evolution of the center of the input set under a discrete-time system.\n\nThis approximation is very conservative, returning a single propagated point from the center of the input set.\n\nFields\n\nsystem: A constrained discrete-time control system (e.g., from MathematicalSystems.jl).\n\nUnderapproximation Map\n\nReturns a function of the form:     f(rect::HyperRectangle, u::SVector) -> Vector{SVector} which returns a singleton list with the propagated center point.\n\n\n\n\n\n","category":"type"},{"location":"reference/System/#Dionysos.System.ContinuousTimeCenteredSimulation","page":"System","title":"Dionysos.System.ContinuousTimeCenteredSimulation","text":"ContinuousTimeCenteredSimulation <: ContinuousTimeSystemUnderApproximation\n\nA concrete underapproximation of a continuous-time system using center-point simulation.\n\nSimulates only the center of the state set under the system dynamics. Returns a single propagated point after integration over a time step.\n\nFields\n\nsystem: A constrained continuous-time control system.\n\nUnderapproximation Map\n\nReturns a function of the form:     f(rect::HyperRectangle, u::SVector, tstep::Real) -> Vector{SVector} which returns a singleton list with the propagated center point.\n\nNotes\n\nUse discretize to convert this approximation into a discrete-time approximation suitable for use in fixed-step abstraction pipelines.\n\n\n\n\n\n","category":"type"},{"location":"reference/System/","page":"System","title":"System","text":"Dionysos.System.DiscreteTimeRandomSimulation\nDionysos.System.ContinuousTimeRandomSimulation","category":"page"},{"location":"reference/System/#Dionysos.System.DiscreteTimeRandomSimulation","page":"System","title":"Dionysos.System.DiscreteTimeRandomSimulation","text":"DiscreteTimeRandomSimulation <: DiscreteTimeSystemUnderApproximation\n\nA stochastic underapproximation of a discrete-time system using random sampling.\n\nPropagates multiple randomly sampled points from the input set to provide a discrete underapproximation of reachable states.\n\nFields\n\nsystem: The underlying discrete-time control system.\nnsamples: Number of samples to draw from the input set.\n\nUnderapproximation Map\n\nReturns a function of the form:     f(rect::HyperRectangle, u::SVector) -> Vector{SVector} which returns a list of propagated samples.\n\n\n\n\n\n","category":"type"},{"location":"reference/System/#Dionysos.System.ContinuousTimeRandomSimulation","page":"System","title":"Dionysos.System.ContinuousTimeRandomSimulation","text":"ContinuousTimeRandomSimulation <: ContinuousTimeSystemUnderApproximation\n\nA stochastic underapproximation for continuous-time systems using random point sampling.\n\nSimulates multiple samples from the input set, over a fixed time step.\n\nFields\n\nsystem: The underlying continuous-time control system.\nnsamples: Number of random samples.\n\nUnderapproximation Map\n\nReturns a function of the form:     f(rect::HyperRectangle, u::SVector, tstep::Real) -> Vector{SVector} which returns a list of propagated samples.\n\nNotes\n\nUse discretize to convert this approximation into a discrete-time approximation suitable for use in fixed-step abstraction pipelines.\n\n\n\n\n\n","category":"type"},{"location":"reference/System/","page":"System","title":"System","text":"Dionysos.System.DiscreteTimeOverApproximationMap\nDionysos.System.ContinuousTimeSystemOverApproximationMap","category":"page"},{"location":"reference/System/#Dionysos.System.DiscreteTimeOverApproximationMap","page":"System","title":"Dionysos.System.DiscreteTimeOverApproximationMap","text":"DiscreteTimeOverApproximationMap <: DiscreteTimeSystemOverApproximation\n\nConcrete implementation of a discrete-time overapproximation of a dynamical system.\n\nThis type wraps a constrained discrete-time system along with an overapproximation map that, given a set of states and a control input, returns a conservative reachable set.\n\nFields\n\nsystem: The underlying ConstrainedBlackBoxControlDiscreteSystem from MathematicalSystems.jl.\nover_approximation_map: A function of the form     f(rect::HyperRectangle, u::SVector) -> HyperRectangle     which returns an overapproximated successor set.\n\n\n\n\n\n","category":"type"},{"location":"reference/System/#Dionysos.System.ContinuousTimeSystemOverApproximationMap","page":"System","title":"Dionysos.System.ContinuousTimeSystemOverApproximationMap","text":"ContinuousTimeSystemOverApproximationMap <: ContinuousTimeSystemOverApproximation\n\nConcrete implementation of a continuous-time overapproximation of a control system.\n\nThis type stores a constrained continuous-time system and an overapproximation function that simulates or bounds the system’s behavior over a given time step.\n\nFields\n\nsystem: The underlying ConstrainedBlackBoxControlContinuousSystem from MathematicalSystems.jl.\nover_approximation_map: A function of the form     f(rect::HyperRectangle, u::SVector, tstep::Real) -> HyperRectangle     which returns an overapproximated reachable set over the given time interval.\n\nNotes\n\nUse discretize to convert this approximation into a discrete-time overapproximation suitable for use in fixed-step abstraction pipelines.\n\n\n\n\n\n","category":"type"},{"location":"reference/System/","page":"System","title":"System","text":"Dionysos.System.DiscreteTimeGrowthBound\nDionysos.System.ContinuousTimeGrowthBound","category":"page"},{"location":"reference/System/#Dionysos.System.DiscreteTimeGrowthBound","page":"System","title":"Dionysos.System.DiscreteTimeGrowthBound","text":"DiscreteTimeGrowthBound <: DiscreteTimeSystemOverApproximation\n\nA discrete-time overapproximation based on growth bounds.\n\nGiven a system and a growthbound_map, this approximation inflates the center trajectory by a radius that depends on the current state set's size and the input.\n\nFields\n\nsystem: A ConstrainedBlackBoxControlDiscreteSystem from MathematicalSystems.jl.\ngrowthbound_map: A function     f(radius::SVector, u::SVector) -> SVector     that computes how uncertainty in state evolves under the system.\n\nOverapproximation Map\n\nReturns a function of the form:     f(rect::HyperRectangle, u::SVector) -> HyperRectangle This function simulates the image of the center and inflates it using the computed growth bound.\n\n\n\n\n\n","category":"type"},{"location":"reference/System/#Dionysos.System.ContinuousTimeGrowthBound","page":"System","title":"Dionysos.System.ContinuousTimeGrowthBound","text":"ContinuousTimeGrowthBound <: ContinuousTimeSystemOverApproximation\n\nA continuous-time overapproximation based on growth bounds for reachable set propagation.\n\nIt estimates how uncertainty evolves through time using a growthbound_map which depends on the radius, input, and time step.\n\nFields\n\nsystem: A ConstrainedBlackBoxControlContinuousSystem from MathematicalSystems.jl.\ngrowthbound_map: A function     f(radius::SVector, u::SVector, tstep::Real) -> SVector     that estimates how uncertainty grows over a time step.\n\nOverapproximation Map\n\nReturns a function of the form:     f(rect::HyperRectangle, u::SVector, tstep::Real) -> HyperRectangle This function simulates the image of the center and inflates it using the computed growth bound.\n\n\n\n\n\n","category":"type"},{"location":"reference/System/","page":"System","title":"System","text":"Dionysos.System.DiscreteTimeLinearized\nDionysos.System.ContinuousTimeLinearized","category":"page"},{"location":"reference/System/#Dionysos.System.DiscreteTimeLinearized","page":"System","title":"Dionysos.System.DiscreteTimeLinearized","text":"DiscreteTimeLinearized <: DiscreteTimeSystemOverApproximation\n\nA discrete-time overapproximation based on linearization of the system dynamics.\n\nThis model approximates system behavior by propagating the linearized dynamics around the center of the state set and bounding the resulting error.\n\nFields\n\nsystem: A ConstrainedBlackBoxControlDiscreteSystem from MathematicalSystems.jl.\nlinsys_map: A function (x, dx, u) -> (Fx, DFx) returning the linearized next state Fx and its Jacobian DFx around perturbation dx.\nerror_map: A function (radius, u) -> Δ returning a bound on the linearization error based on the set radius.\n\nOverapproximation Map\n\nReturns a function of the form:     f(rect::HyperRectangle, u::SVector) -> HyperRectangle It evaluates the system at the center, adds linearized spread based on Jacobian, and inflates with the error bound.\n\n\n\n\n\n","category":"type"},{"location":"reference/System/#Dionysos.System.ContinuousTimeLinearized","page":"System","title":"Dionysos.System.ContinuousTimeLinearized","text":"ContinuousTimeLinearized <: ContinuousTimeSystemOverApproximation\n\nA continuous-time overapproximation based on Runge-Kutta linearization of the system dynamics.\n\nThe method propagates both the nominal trajectory and its linearized sensitivity over a time step using a 4th-order Runge-Kutta scheme, while bounding the second-order remainder error.\n\nFields\n\nsystem: A ConstrainedBlackBoxControlContinuousSystem from MathematicalSystems.jl.\nlinsys_map: A function (x, dx, u, tstep) -> (Fx, DFx) simulating a linearized trajectory and its Jacobian.\nerror_map: A function (r, u, tstep) -> Δ computing a bound on the nonlinearity-induced error over time.\n\nOverapproximation Map\n\nReturns a function of the form:     f(rect::HyperRectangle, u::SVector, tstep::Real) -> HyperRectangle The result is a conservative reachable set from the center using linearization + second-order error correction.\n\n\n\n\n\n","category":"type"},{"location":"reference/System/#Controller","page":"System","title":"Controller","text":"","category":"section"},{"location":"reference/System/","page":"System","title":"System","text":"So far, the abstraction-based methods that we use define either piecewise-constant or piecewise-affine controllers.","category":"page"},{"location":"reference/System/","page":"System","title":"System","text":"Dionysos.System.ConstantController\nDionysos.System.AffineController","category":"page"},{"location":"reference/System/#Dionysos.System.ConstantController","page":"System","title":"Dionysos.System.ConstantController","text":"ConstantController{T, VT}\n\nencodes a constant state-dependent controller of the κ(x) = c.\n\n\n\n\n\n","category":"type"},{"location":"reference/System/#Dionysos.System.AffineController","page":"System","title":"Dionysos.System.AffineController","text":"AffineController{T, MT, VT1, VT2}\n\nencodes an affine state-dependent controller of the κ(x) = K*(x-c)+ℓ.\n\n\n\n\n\n","category":"type"},{"location":"reference/System/#Trajectories","page":"System","title":"Trajectories","text":"","category":"section"},{"location":"reference/System/","page":"System","title":"System","text":"Dionysos.System.DiscreteTrajectory\nDionysos.System.ContinuousTrajectory\nDionysos.System.HybridTrajectory\nDionysos.System.Trajectory\nDionysos.System.Control_trajectory\nDionysos.System.Cost_control_trajectory","category":"page"},{"location":"reference/System/#Dionysos.System.DiscreteTrajectory","page":"System","title":"Dionysos.System.DiscreteTrajectory","text":"DiscreteTrajectory{Q, TT}\n\nq_0 is the starting mode and transitions is a sequence of discrete transitions in the system.\n\n\n\n\n\n","category":"type"},{"location":"reference/System/#Dionysos.System.ContinuousTrajectory","page":"System","title":"Dionysos.System.ContinuousTrajectory","text":"ContinuousTrajectory{T, XVT<:AbstractVector{T}, UVT<:AbstractVector{T}}\n\nx is a sequence of points in the state space and u is a sequence of points in the input space.\n\n\n\n\n\n","category":"type"},{"location":"reference/System/#Dionysos.System.HybridTrajectory","page":"System","title":"Dionysos.System.HybridTrajectory","text":"HybridTrajectory{T, TT, XVT <: AbstractVector{T}, UVT <: AbstractVector{T}}\n\ndiscrete is the discrete trajectory of type DiscreteTrajectory and  continuous is a the continuous trajectory of type ContinuousTrajectory.\n\n\n\n\n\n","category":"type"},{"location":"reference/System/#Dionysos.System.Trajectory","page":"System","title":"Dionysos.System.Trajectory","text":"Trajectory{T}\n\nprovides the sequence of some elements of a trajectory.\n\n\n\n\n\n","category":"type"},{"location":"reference/System/#Dionysos.System.Control_trajectory","page":"System","title":"Dionysos.System.Control_trajectory","text":"Control_trajectory{T1, T2}\n\nprovides the sequence of states and inputs of a trajectory.\n\n\n\n\n\n","category":"type"},{"location":"reference/System/#Dionysos.System.Cost_control_trajectory","page":"System","title":"Dionysos.System.Cost_control_trajectory","text":"Cost_control_trajectory{T1, T2, T3}\n\nprovides the sequence of states, inputs (via Control_trajectory) and costs of a trajectory.\n\n\n\n\n\n","category":"type"},{"location":"manual/manual/#Overview","page":"Overview","title":"Overview","text":"","category":"section"},{"location":"manual/manual/","page":"Overview","title":"Overview","text":"Dionysos aims to design a controller for a system mathcalS so that the closed-loop system satisfies the specification Sigma where:","category":"page"},{"location":"manual/manual/","page":"Overview","title":"Overview","text":"the system mathcalS is specified by MathematicalSystems or HybridSystems objects;\nthe specification Sigma is specified by ProblemType objects;\nthe solver mathcalO implementents the abstract type AbstractOptimizer of MathOptInterface.","category":"page"},{"location":"manual/manual/","page":"Overview","title":"Overview","text":"So a control problem (mathcalSSigma) can be solved by mathcalO via the JuMP interface, with Dionysos inheriting JuMP's powerful and practical optimization framework.","category":"page"},{"location":"manual/manual/#Overview-of-the-code-structure","page":"Overview","title":"Overview of the code structure","text":"","category":"section"},{"location":"manual/manual/","page":"Overview","title":"Overview","text":"Description of the core of the Dionysos.jl package, the src folder:","category":"page"},{"location":"manual/manual/","page":"Overview","title":"Overview","text":"Subfolder Description\nutils Contains useful functions, data structures, classic search algorithms, file management, ...\ndomain Contains structures defining the domain of a system\nsystem Contains a description of specific systems\nproblem Contains control problems that can be solved by Dionysos solvers\nsymbolic Contains the data structures needed to encode the abstractions\noptim Contains the solvers","category":"page"},{"location":"manual/manual/#Systems","page":"Overview","title":"Systems","text":"","category":"section"},{"location":"manual/manual/","page":"Overview","title":"Overview","text":"The system types supported in Dionysos.jl are:","category":"page"},{"location":"manual/manual/","page":"Overview","title":"Overview","text":"MathematicalSystems, which proposes generic and flexible system definitions (e.g.     discrete-time/continuous-time, constrained, noisy systems), such that, for example, the system MathematicalSystems.NoisyConstrainedAffineControlDiscreteSystem of the form x(k+1) = A x(k) + B u(k) + c + D w(k)  x(k)inmathcalX  u(k)inmathcalU w(k)inmathcalW forall k","category":"page"},{"location":"manual/manual/","page":"Overview","title":"Overview","text":"where mathcalX is the state constraint, mathcalU is the input constraint and mathcalW is the noise constraint.","category":"page"},{"location":"manual/manual/","page":"Overview","title":"Overview","text":"HybridSystems, which extends the class of systems of MathematicalSystems to hybrid systems.","category":"page"},{"location":"manual/manual/#Problems","page":"Overview","title":"Problems","text":"","category":"section"},{"location":"manual/manual/","page":"Overview","title":"Overview","text":"The problem types supported in Dionysos.jl are:","category":"page"},{"location":"manual/manual/","page":"Overview","title":"Overview","text":"Type Description\nReach-avoid optimal control problem (mathcalSmathcalImathcalTmathcalVmathcalC T), where mathcalS is the system, mathcalI is the initial set, mathcalT is the target set, mathcalVmathcalXrightarrow mathbbR is the cost state function, mathcalCmathcalXtimes mathcalUrightarrow mathbbR is the transition cost function, T is the time limit to satisfy the specification.\nSafety control problem (mathcalSmathcalImathcalS T), where mathcalS is the system, mathcalI is the initial set, mathcalS is the safe set,  T is the time during which safety must be ensured.","category":"page"},{"location":"manual/manual/","page":"Overview","title":"Overview","text":"Extensions for linear temporal logic (LTL) specifications are currently being implemented.","category":"page"},{"location":"manual/manual/#Solvers","page":"Overview","title":"Solvers","text":"","category":"section"},{"location":"manual/manual/","page":"Overview","title":"Overview","text":"The following tables summarize the different solvers. ","category":"page"},{"location":"manual/manual/","page":"Overview","title":"Overview","text":"Abstraction-based solver types implemented in Dionysos.jl:","category":"page"},{"location":"manual/manual/","page":"Overview","title":"Overview","text":"Type Full vs partial discretization Partition vs Cover Shape Local controller Abstraction System Reference\nUniform grid abstraction Full Partition Hyperrectangle Piece-wise constant Non-determinisitic Continuous-time SCOTS: A Tool for the Synthesis of Symbolic Controllers\nLazy abstraction Partial Partition Hyperrectangle Piece-wise constant Non-determinisitic Continuous-time Alternating simulation on hierarchical abstractions\nHierarchical abstraction Partial Partition Hyperrectangle Piece-wise constant Non-determinisitic Continuous-time Alternating simulation on hierarchical abstractions\nEllipsoid abstraction Full Cover Ellipsoid Piece-wise affine Determinisitic Discrete-time affine State-feedback Abstractions for Optimal Control of Piecewise-affine Systems\nLazy ellipsoid abstraction Partial Cover Ellipsoid Piece-wise affine Determinisitic Discrete-time non-linear Not yet published","category":"page"},{"location":"manual/manual/","page":"Overview","title":"Overview","text":"Non abstraction-based solver types implemented in Dionysos.jl:","category":"page"},{"location":"manual/manual/","page":"Overview","title":"Overview","text":"Type Description Reference\nBemporad Morari Optimal control of hybrid systems via a predictive control scheme using mixed integer quadratic programming (MIQP) online optimization procedures. Control of systems integrating logic, dynamics, and constraints\nBranchAndBound Optimal control of hybrid systems via a predictive control scheme combining a branch and bound algorithm that can refine Q-functions using Lagrangian duality. Abstraction-based branch and bound approach to Q-learning for hybrid optimal control","category":"page"},{"location":"manual/manual/","page":"Overview","title":"Overview","text":"Solver interface","category":"page"},{"location":"manual/manual/","page":"Overview","title":"Overview","text":"Each solver is defined by a module which must implement the abstract type AbstractOptimizer and the Optimize! function. For example, for the UniformGridAbstraction solver, this structure and function are defined as follows","category":"page"},{"location":"manual/manual/","page":"Overview","title":"Overview","text":"using JuMP\n\nmutable struct Optimizer{T} <: MOI.AbstractOptimizer\n    concrete_problem::Union{Nothing, PR.ProblemType}\n    abstract_problem::Union{Nothing, PR.OptimalControlProblem, PR.SafetyProblem}\n    abstract_system::Union{Nothing, SY.SymbolicModelList}\n    abstract_controller::Union{Nothing, UT.SortedTupleSet{2, NTuple{2, Int}}}\n    concrete_controller::Any\n    state_grid::Union{Nothing, DO.Grid}\n    input_grid::Union{Nothing, DO.Grid}\n    function Optimizer{T}() where {T}\n        return new{T}(nothing, nothing, nothing, nothing, nothing, nothing, nothing)\n    end\nend","category":"page"},{"location":"manual/manual/","page":"Overview","title":"Overview","text":"and","category":"page"},{"location":"manual/manual/","page":"Overview","title":"Overview","text":"function MOI.optimize!(optimizer::Optimizer)\n    # Build the abstraction\n    abstract_system = build_abstraction(\n        optimizer.concrete_problem.system,\n        optimizer.state_grid,\n        optimizer.input_grid,\n    )\n    optimizer.abstract_system = abstract_system\n    # Build the abstract problem\n    abstract_problem = build_abstract_problem(optimizer.concrete_problem, abstract_system)\n    optimizer.abstract_problem = abstract_problem\n    # Solve the abstract problem\n    abstract_controller = solve_abstract_problem(abstract_problem)\n    optimizer.abstract_controller = abstract_controller\n    # Solve the concrete problem\n    optimizer.concrete_controller =\n        solve_concrete_problem(abstract_system, abstract_controller)\n    return\nend","category":"page"},{"location":"manual/manual/#Running-an-example","page":"Overview","title":"Running an example","text":"","category":"section"},{"location":"manual/manual/","page":"Overview","title":"Overview","text":"In this section, we outline how to define and solve a control problem with Dionsysos. For an executable version of this example, see Solvers: Path planning problem in the documentation.","category":"page"},{"location":"manual/manual/","page":"Overview","title":"Overview","text":"Define a control problem, i.e., the system and the specification of the desired closed loop behaviour. To do this, you can define new ones yourself or directly load an existing benchmark, for example","category":"page"},{"location":"manual/manual/","page":"Overview","title":"Overview","text":"concrete_problem = PathPlanning.problem(; simple = true, approx_mode = PathPlanning.GROWTH);\nconcrete_system = concrete_problem.system;","category":"page"},{"location":"manual/manual/","page":"Overview","title":"Overview","text":"Choose the solver you wish to use","category":"page"},{"location":"manual/manual/","page":"Overview","title":"Overview","text":"using JuMP\noptimizer = MOI.instantiate(AB.UniformGridAbstraction.Optimizer)","category":"page"},{"location":"manual/manual/","page":"Overview","title":"Overview","text":"Define the solver's meta-parameters","category":"page"},{"location":"manual/manual/","page":"Overview","title":"Overview","text":"x0 = SVector(0.0, 0.0, 0.0);\nhx = SVector(0.2, 0.2, 0.2);\nstate_grid = DO.GridFree(x0, hx);\nu0 = SVector(0.0, 0.0);\nhu = SVector(0.3, 0.3);\ninput_grid = DO.GridFree(u0, hu);","category":"page"},{"location":"manual/manual/","page":"Overview","title":"Overview","text":"Set the solver's meta-parameters","category":"page"},{"location":"manual/manual/","page":"Overview","title":"Overview","text":"MOI.set(optimizer, MOI.RawOptimizerAttribute(\"concrete_problem\"), concrete_problem)\nMOI.set(optimizer, MOI.RawOptimizerAttribute(\"state_grid\"), state_grid)\nMOI.set(optimizer, MOI.RawOptimizerAttribute(\"input_grid\"), input_grid)","category":"page"},{"location":"manual/manual/","page":"Overview","title":"Overview","text":"Solve the control problem","category":"page"},{"location":"manual/manual/","page":"Overview","title":"Overview","text":"MOI.optimize!(optimizer)","category":"page"},{"location":"manual/manual/","page":"Overview","title":"Overview","text":"Get the results","category":"page"},{"location":"manual/manual/","page":"Overview","title":"Overview","text":"abstract_system = MOI.get(optimizer, MOI.RawOptimizerAttribute(\"abstract_system\"))\nabstract_problem = MOI.get(optimizer, MOI.RawOptimizerAttribute(\"abstract_problem\"))\nabstract_controller = MOI.get(optimizer, MOI.RawOptimizerAttribute(\"abstract_controller\"))\nconcrete_controller = MOI.get(optimizer, MOI.RawOptimizerAttribute(\"concrete_controller\"))","category":"page"},{"location":"manual/manual/","page":"Overview","title":"Overview","text":"In Dionysos, all the structures that could be relevant to plot (such as trajectories, state-space discretization, specifications, obstacles, etc.)  have an associated @recipe function, which makes it very easy to plot all the results using the single common plot function of Plots.jl. For example","category":"page"},{"location":"manual/manual/","page":"Overview","title":"Overview","text":"using Plots\n\nplot!(concrete_system.X; color = :yellow, opacity = 0.5);\nplot!(abstract_system.Xdom; color = :blue, opacity = 0.5);\nplot!(concrete_problem.initial_set; color = :green, opacity = 0.2);\nplot!(concrete_problem.target_set; dims = [1, 2], color = :red, opacity = 0.2);\nplot!(control_trajectory; ms = 0.5)","category":"page"},{"location":"reference/Optim/#Optim","page":"Optim","title":"Optim","text":"","category":"section"},{"location":"reference/Optim/","page":"Optim","title":"Optim","text":"This folder contains all the different (abstraction-based or not) solvers that can be used. Note that all the solvers are defined using the MathOptInterface framework as a subtype of  AbstractOptimizer by implementig the optimize! function.","category":"page"},{"location":"reference/Optim/#Abstraction-based-solvers","page":"Optim","title":"Abstraction-based solvers","text":"","category":"section"},{"location":"reference/Optim/#Uniform-grid-abstraction-solver","page":"Optim","title":"Uniform grid abstraction solver","text":"","category":"section"},{"location":"reference/Optim/","page":"Optim","title":"Optim","text":"Dionysos.Optim.Abstraction.UniformGridAbstraction.Optimizer\nDionysos.Optim.Abstraction.UniformGridAbstraction.OptimizerEmptyProblem\nDionysos.Optim.Abstraction.UniformGridAbstraction.OptimizerOptimalControlProblem\nDionysos.Optim.Abstraction.UniformGridAbstraction.OptimizerSafetyProblem","category":"page"},{"location":"reference/Optim/#Dionysos.Optim.Abstraction.UniformGridAbstraction.Optimizer","page":"Optim","title":"Dionysos.Optim.Abstraction.UniformGridAbstraction.Optimizer","text":"Optimizer{T} <: MOI.AbstractOptimizer\n\nA solver implementing the classical abstraction method (e.g., used in SCOTS), where the entire domain is partitioned into hyper-rectangular cells, independent of the specific control task.  The optimizer is structured into modular sub-solvers, each dedicated to a specific problem type. It ensures that abstraction is computed before solving the control problem, maintaining modularity and extendability.\n\nStructure\n\nThe optimizer internally manages two sub-solvers:\n\nOptimizerEmptyProblem: computes the abstraction (symbolic model) from the system dynamics.\nA control-specific solver, depending on the problem type:\nOptimizerSafetyProblem: for safety specifications.\nOptimizerOptimalControlProblem: for reachability/optimal control.\n\nBehavior\n\nAutomatically dispatches the appropriate control solver based on the ProblemType provided via MOI.set(optimizer, MOI.RawOptimizerAttribute(\"concrete_problem\"), my_problem).\nEnsures that the abstraction is computed before solving the control problem.\nAllows the concrete problem to be changed without recomputing the abstraction, as long as the abstraction is already built.\nStores the resulting abstract_system and synthesizes a corresponding concrete_controller.\nTracks the time spent during the last MOI.optimize! call via the solve_time_sec field.\nSupports configurable verbosity through print_level:\nprint_level = 0: silent mode (no output)\nprint_level = 1: standard verbosity (default)\nprint_level = 2: detailed logging and messages\n\nAccess to subsolver fields\n\nAny field or attribute present in the sub-solvers (e.g., state_grid, abstract_value_function, etc.) can be accessed or set transparently through this wrapper optimizer via:\n\nMOI.set(optimizer, MOI.RawOptimizerAttribute(\"state_grid\"), grid)\nMOI.get(optimizer, MOI.RawOptimizerAttribute(\"abstract_value_function\"))\n\nExample\n\nusing Dionysos, JuMP\noptimizer = MOI.instantiate(Dionysos.Optim.UniformGridAbstraction.Optimizer)\n\nMOI.set(optimizer, MOI.RawOptimizerAttribute(\"concrete_problem\"), my_problem)\nMOI.set(optimizer, MOI.RawOptimizerAttribute(\"state_grid\"), state_grid)\nMOI.set(optimizer, MOI.RawOptimizerAttribute(\"input_grid\"), input_grid)\nMOI.set(optimizer, MOI.RawOptimizerAttribute(\"time_step\"), 0.1)\nMOI.set(optimizer, MOI.RawOptimizerAttribute(\"print_level\"), 2)\n\nMOI.optimize!(optimizer)\n\ntime = MOI.get(optimizer, MOI.RawOptimizerAttribute(\"solve_time_sec\"))\nvalue_fun = MOI.get(optimizer, MOI.RawOptimizerAttribute(\"abstract_value_function\"))\ncontroller = MOI.get(optimizer, MOI.RawOptimizerAttribute(\"concrete_controller\"))\n\n\n\n\n\n","category":"type"},{"location":"reference/Optim/#Dionysos.Optim.Abstraction.UniformGridAbstraction.OptimizerEmptyProblem","page":"Optim","title":"Dionysos.Optim.Abstraction.UniformGridAbstraction.OptimizerEmptyProblem","text":"OptimizerEmptyProblem{T} <: MOI.AbstractOptimizer\n\nA solver responsible for constructing an abstraction of the system dynamics, independent of the control problem.   This optimizer encapsulates all parameters required to solve an EmptyProblem, typically used to generate a symbolic model (abstraction) from the continuous or discrete-time system.\n\nPurpose\n\nThis optimizer performs symbolic abstraction by simulating or approximating the system under different techniques.   The abstraction technique is selected via the approx_mode field.\n\nEach technique activates a specific set of fields used for approximation.\n\nUser Settings\n\nempty_problem: Instance of EmptyProblem, which defines the system.\nstate_grid: State space discretization.\ninput_grid: Input space discretization.\n\nContinuous-Time System Settings\n\ntime_step: Time step used for simulation or discretization if the system is a continuous-time system.\nnsystem: Number of intermediate steps for Runge Kutta simulation.\n\nApproximation Settings\n\nEach mode in approx_mode corresponds to different fields:\n\napprox_mode: Approximation strategy to use.\nUSER_DEFINED : Custom overapproximation function.\noverapproximation_map::Function: Custom overapproximation function.\nGROWTH : Growth-bound based overapproximation.\njacobian_bound: Used to bound system behavior via growth bounds.\nLINEARIZED : Linearization-based overapproximation.\nDF_sys, bound_DF, bound_DDF: Jacobian and Hessian-based approximations.\nCENTER_SIMULATION : Only simulates the center of each cell in the grid.\nRANDOM_SIMULATION : Simulates the system using random sampling within the grid cells.\nn_samples: Number of simulation samples per cell in the grid for random sampling-based approximations.\nefficient: Whether to optimize internal computations for speed or memory (by using approx_mode specific functions).\nprint_level: Level of verbosity (0 = silent, 1 = default, 2 = verbose).\n\nAbstraction Result\n\nabstract_system: The resulting symbolic abstraction, of type SymbolicModelList.\ndiscrete_time_system: A discrete-time version of the system used internally for abstraction.\nabstraction_construction_time_sec: Time taken (in seconds) to construct the abstraction.\n\nSystem Approximation\n\nThese fields are automatically constructed based on the approx_mode: \n\ncontinuous_time_system_approximation: A ContinuousTimeSystemApproximation constructed when the original system is continuous. \ndiscrete_time_system_approximation: A DiscreteTimeSystemApproximation always constructed.\n\nExample\n\nusing Dionysos, JuMP\noptimizer = MOI.instantiate(Dionysos.Optim.OptimizerEmptyProblem.Optimizer)\n\nMOI.set(optimizer, MOI.RawOptimizerAttribute(\"concrete_problem\"), my_problem)\nMOI.set(optimizer, MOI.RawOptimizerAttribute(\"state_grid\"), state_grid)\nMOI.set(optimizer, MOI.RawOptimizerAttribute(\"input_grid\"), input_grid)\nMOI.set(optimizer, MOI.RawOptimizerAttribute(\"time_step\"), 0.1)\nMOI.set(optimizer, MOI.RawOptimizerAttribute(\"print_level\"), 2)\nMOI.set(optimizer, MOI.RawOptimizerAttribute(\"approx_mode\"), GROWTH)\nMOI.set(optimizer, MOI.RawOptimizerAttribute(\"jacobian_bound\"), my_jacobian_bound)\n\nMOI.optimize!(optimizer)\n\ntime = MOI.get(optimizer, MOI.RawOptimizerAttribute(\"abstraction_construction_time_sec\"))\nabstract_system = MOI.get(optimizer, MOI.RawOptimizerAttribute(\"abstract_system\"))\ndiscrete_time_system = MOI.get(optimizer, MOI.RawOptimizerAttribute(\"discrete_time_system\"))\n\n\n\n\n\n","category":"type"},{"location":"reference/Optim/#Dionysos.Optim.Abstraction.UniformGridAbstraction.OptimizerOptimalControlProblem","page":"Optim","title":"Dionysos.Optim.Abstraction.UniformGridAbstraction.OptimizerOptimalControlProblem","text":"OptimizerOptimalControlProblem{T} <: MOI.AbstractOptimizer\n\nAn optimizer that solves reachability or reach-avoid optimal control problems using symbolic abstractions of the system.\n\nThis solver takes as input a concrete problem (typically an instance of OptimalControlProblem) and a symbolic abstraction of the system (i.e., an abstract_system). It then solves the abstract versions of the control problem.\n\nKey Behavior\n\nLifts the concrete reachability problem to the symbolic abstraction space (abstract_system) and constructs the corresponding abstract_problem.\nComputes the controllable_set — the largest set of abstract states from which reachability can be guaranteed.\nSynthesizes a abstract_controller that brings the system within the target set under worst-case transitions.\nComputes the abstract_value_function that maps each state (cell) to the worst-case number of steps needed to reach the target set.\nThe solver is successful if the field success is true after MOI.optimize!.\n\nParameters\n\nInputs\n\nconcrete_problem: Instance of OptimalControlProblem, defining the reach-avoid control task.\nabstract_system: The symbolic abstraction of the system, typically produced by an abstraction solver such as OptimizerEmptyProblem.\n\nAbstract Problem Fields\n\nabstract_problem: The lifted problem expressed over the abstract system.\nabstract_controller: Abstract controller.\nabstract_problem_time_sec: Time taken to solve the abstract problem.\n\nFixpoint Stopping\n\nearly_stop: A Bool that allows stopping the fixpoint iteration as soon as the initial set is fully contained in the growing controllable set. This is useful in reachability problems where the fixpoint expands the target set outward.\n\nMemory Optimization\n\nsparse_input: If true, replaces the default state × input transition table with a sparse dictionary-based structure.   This is useful when:\nThe input space is large.\nOnly a small subset of inputs are admissible per state.\nFor example, in the determinized abstraction case where inputs are of the form new_input = (input, target).\n\nOutput Sets\n\ncontrollable_set: The set of abstract states from which the target set can be reached (worst-case guaranteed).\nuncontrollable_set: Complementary set of unreachable states under the chosen strategy.\n\nValue Functions\n\nvalue_fun_tab: A tabular representation storing, for each state, the associated cost or number of steps to reach the target.\nabstract_value_function: Maps abstract states (cells) to worst-case cost-to-go.\nconcrete_value_function: Optionally stores a refined value function over the original (non-abstract) state space.\n\nMiscellaneous\n\nsuccess: A Bool flag indicating whether the problem was solved successfully.\nprint_level: Controls verbosity:\n0: silent\n1: default (info)\n2: detailed logging\n\nExample\n\nusing Dionysos, JuMP\noptimizer = MOI.instantiate(Dionysos.Optim.OptimizerOptimalControlProblem.Optimizer)\n\nMOI.set(optimizer, MOI.RawOptimizerAttribute(\"concrete_problem\"), my_problem)\nMOI.set(optimizer, MOI.RawOptimizerAttribute(\"abstract_system\"), abstract_system)\nMOI.set(optimizer, MOI.RawOptimizerAttribute(\"print_level\"), 2)\n\nMOI.optimize!(optimizer)\n\ntime = MOI.get(optimizer, MOI.RawOptimizerAttribute(\"abstract_problem_time_sec\"))\ncontrollable_set = MOI.get(optimizer, MOI.RawOptimizerAttribute(\"controllable_set\"))\nabstract_value_function = MOI.get(optimizer, MOI.RawOptimizerAttribute(\"abstract_value_function\"))\nconcrete_value_function = MOI.get(optimizer, MOI.RawOptimizerAttribute(\"concrete_value_function\"))\nabstract_controller = MOI.get(optimizer, MOI.RawOptimizerAttribute(\"concrete_controller\"))\n\n\n\n\n\n","category":"type"},{"location":"reference/Optim/#Dionysos.Optim.Abstraction.UniformGridAbstraction.OptimizerSafetyProblem","page":"Optim","title":"Dionysos.Optim.Abstraction.UniformGridAbstraction.OptimizerSafetyProblem","text":"OptimizerSafetyProblem{T} <: MOI.AbstractOptimizer\n\nAn optimizer for solving safety control problems on symbolic system abstractions.\n\nThis solver takes a SafetyProblem as input along with a symbolic abstraction of the system (i.e., an abstract_system), and computes a controller that ensures all trajectories remain within a given safe set indefinitely (i.e., an invariant set).\n\nKey Behavior\n\nLifts the concrete safety problem to the symbolic abstraction space (abstract_system) and constructs the corresponding abstract_problem.\nComputes the invariant_set — the largest set of abstract states from which safety can be guaranteed.\nSynthesizes a abstract_controller that keeps the abstract system within this invariant set under worst-case transitions.\nThe solver is successful if the field success is true after MOI.optimize!.\n\nParameters\n\nInputs\n\nconcrete_problem: An instance of SafetyProblem that defines the safe set, system, and dynamics.\nabstract_system: The symbolic abstraction of the system, such as one produced by OptimizerEmptyProblem.\n\nAbstract Problem Fields\n\nabstract_problem: The lifted safety problem over the abstract model.\nabstract_controller: Abstract controller.\nabstract_problem_time_sec: Time to solve the abstract safety problem.\n\nResult Sets\n\ninvariant_set: The largest set of abstract states guaranteed to remain within the safe set.\ninvariant_set_complement: The complement — states from which safety cannot be guaranteed under any control.\n\nMiscellaneous\n\nsuccess: A Bool flag that is true if a valid invariant set and controller were found.\nprint_level: Controls verbosity:\n0: silent\n1: default (info)\n2: verbose logging\n\nExample\n\nusing Dionysos, JuMP\noptimizer = MOI.instantiate(Dionysos.Optim.OptimizerSafetyProblem.Optimizer)\n\nMOI.set(optimizer, MOI.RawOptimizerAttribute(\"concrete_problem\"), my_problem)\nMOI.set(optimizer, MOI.RawOptimizerAttribute(\"abstract_system\"), abstract_system)\nMOI.set(optimizer, MOI.RawOptimizerAttribute(\"print_level\"), 2)\n\nMOI.optimize!(optimizer)\n\ntime = MOI.get(optimizer, MOI.RawOptimizerAttribute(\"abstract_problem_time_sec\"))\ninvariant_set = MOI.get(optimizer, MOI.RawOptimizerAttribute(\"invariant_set\"))\nabstract_controller = MOI.get(optimizer, MOI.RawOptimizerAttribute(\"concrete_controller\"))\n\n\n\n\n\n","category":"type"},{"location":"reference/Optim/#Other-abstraction-based-solvers","page":"Optim","title":"Other abstraction-based solvers","text":"","category":"section"},{"location":"reference/Optim/","page":"Optim","title":"Optim","text":"Dionysos.Optim.Abstraction.EllipsoidsAbstraction.Optimizer\nDionysos.Optim.Abstraction.HierarchicalAbstraction.Optimizer\nDionysos.Optim.Abstraction.LazyAbstraction.Optimizer\nDionysos.Optim.Abstraction.LazyEllipsoidsAbstraction.Optimizer","category":"page"},{"location":"reference/Optim/#Dionysos.Optim.Abstraction.EllipsoidsAbstraction.Optimizer","page":"Optim","title":"Dionysos.Optim.Abstraction.EllipsoidsAbstraction.Optimizer","text":"Optimizer{T} <: MOI.AbstractOptimizer\n\nAbstraction-based solver for which the domain is covered with ellipsoidal cells, independently of the control task.\n\n\n\n\n\n","category":"type"},{"location":"reference/Optim/#Dionysos.Optim.Abstraction.HierarchicalAbstraction.Optimizer","page":"Optim","title":"Dionysos.Optim.Abstraction.HierarchicalAbstraction.Optimizer","text":"Optimizer{T} <: MOI.AbstractOptimizer\n\nAbstraction-based solver for which the domain is initially partioned into coarse hyper-rectangular cells, which are iteratively locally smartly refined with respect to the control task.\n\n\n\n\n\n","category":"type"},{"location":"reference/Optim/#Dionysos.Optim.Abstraction.LazyAbstraction.Optimizer","page":"Optim","title":"Dionysos.Optim.Abstraction.LazyAbstraction.Optimizer","text":"Optimizer{T} <: MOI.AbstractOptimizer\n\nAbstraction-based solver for which the hyper-rectangular abstraction and the controller are co-designed to reduce the computation cost of the abstraction.\n\n\n\n\n\n","category":"type"},{"location":"reference/Optim/#Dionysos.Optim.Abstraction.LazyEllipsoidsAbstraction.Optimizer","page":"Optim","title":"Dionysos.Optim.Abstraction.LazyEllipsoidsAbstraction.Optimizer","text":"Optimizer{T} <: MOI.AbstractOptimizer\n\nAbstraction-based solver using the lazy abstraction method with ellipsoidal cells.\n\n\n\n\n\n","category":"type"},{"location":"reference/Optim/#Other-solvers","page":"Optim","title":"Other solvers","text":"","category":"section"},{"location":"reference/Optim/","page":"Optim","title":"Optim","text":"Dionysos.Optim.BemporadMorari.Optimizer\nDionysos.Optim.BranchAndBound.Optimizer","category":"page"},{"location":"reference/Optim/#Dionysos.Optim.BemporadMorari.Optimizer","page":"Optim","title":"Dionysos.Optim.BemporadMorari.Optimizer","text":"Optimizer{T} <: MOI.AbstractOptimizer\n\nBemporad Morari solver: Optimal control of hybrid systems via a predictive control scheme using mixed integer quadratic programming (MIQP) online optimization procedures.\n\n\n\n\n\n","category":"type"},{"location":"reference/Optim/#Dionysos.Optim.BranchAndBound.Optimizer","page":"Optim","title":"Dionysos.Optim.BranchAndBound.Optimizer","text":"Optimizer{T} <: MOI.AbstractOptimizer\n\nBranch and bound solver: Optimal control of hybrid systems via a predictive control scheme combining a branch and bound algorithm that can refine Q-functions using Lagrangian duality.\n\n\n\n\n\n","category":"type"},{"location":"reference/Mapping/#Mapping","page":"Mapping","title":"Mapping","text":"","category":"section"},{"location":"reference/Mapping/","page":"Mapping","title":"Mapping","text":"This folder contains mappings to make the link between the concrete domain and the abstract domain, and vice-versa.","category":"page"},{"location":"reference/Mapping/","page":"Mapping","title":"Mapping","text":"Dionysos.Mapping.MappingContinuousGrid\nDionysos.Mapping.MappingContinuousEllipsoid","category":"page"},{"location":"reference/Mapping/#Dionysos.Mapping.MappingContinuousGrid","page":"Mapping","title":"Dionysos.Mapping.MappingContinuousGrid","text":"MappingContinuousGrid(C::DO.ContinuousDomain, D::DomainList{N,T,S<:DO.Grid{N,T}}\n\nMapping containing methods to convert elements in a ContinuousDomain to a grid-based DomainList and vice-versa.\n\n\n\n\n\n","category":"type"},{"location":"reference/Mapping/#Dionysos.Mapping.MappingContinuousEllipsoid","page":"Mapping","title":"Dionysos.Mapping.MappingContinuousEllipsoid","text":"MappingContinuousEllipsoid{C<:DO.ContinuousDomain{N,T}, CE<:DO.ContinuousBoundedEllipsoidDomain{N,T,B,E}}\n\nMapping containing methods to convert elements in a ContinuousDomain to a ContinuousBoundedEllipsoidDomain and vice-versa.\n\n\n\n\n\n","category":"type"},{"location":"bibliography/#Bibliography","page":"Bibliography","title":"Bibliography","text":"","category":"section"},{"location":"bibliography/","page":"Bibliography","title":"Bibliography","text":"","category":"page"},{"location":"","page":"Index","title":"Index","text":"<img class=\"display-light-only\" src=\"assets/logo.png\" height=\"240\" alt=\"Dionysos Logo\">\n<img class=\"display-dark-only\" src=\"assets/logo-dark.png\" height=\"240\" alt=\"Dionysos Logo\">","category":"page"},{"location":"#Introduction","page":"Index","title":"Introduction","text":"","category":"section"},{"location":"","page":"Index","title":"Index","text":"Welcome to the documentation for Dionysos!","category":"page"},{"location":"#What-is-Dionysos-?","page":"Index","title":"What is Dionysos ?","text":"","category":"section"},{"location":"","page":"Index","title":"Index","text":"Dionysos is the software of the ERC project Learning to control (L2C) embedded in Julia. In view of the Cyber-Physical Revolution, the only sensible way of controlling these complex systems is often by discretizing the different variables, thus transforming the model into a simple combinatorial problem on a finite-state automaton, called an abstraction of this system. The goal of L2C is to transform this approach into an effective, scalable, cutting-edge technology that will address the CPS challenges and unlock their potential. This ambitious goal will be achieved by leveraging powerful tools from Mathematical Engineering.","category":"page"},{"location":"#Current-version","page":"Index","title":"Current version","text":"","category":"section"},{"location":"","page":"Index","title":"Index","text":"The current version is still in the making, and allows to solve problems such as reachability problems for hybrid systems.","category":"page"},{"location":"#Longterm-objectives","page":"Index","title":"Longterm objectives","text":"","category":"section"},{"location":"","page":"Index","title":"Index","text":"Rather than relying on closed-form analysis of a model of the dynamical system, Dionysos will learn the optimal control from data, whether harvested from the physical system or generated synthetically. It will rely on a novel methodology, combining the efficiency of several modern optimization/control-theoretic/machine-learning techniques with the theoretical power of the Abstraction approach. All the pieces of the architecture are chosen to foster black-box and data-driven analysis, thereby matching rising and unresolved challenges. Summarizing, the objectives are","category":"page"},{"location":"","page":"Index","title":"Index","text":"To develop a mathematical and algorithmic framework for efficient Abstraction of Cyber-Physical Systems thriving on recent technologies in Optimization and Control;\nTo leverage this framework in situations where the system is described by data, rather than a classical model.","category":"page"},{"location":"#Structure-of-the-documentation","page":"Index","title":"Structure of the documentation","text":"","category":"section"},{"location":"","page":"Index","title":"Index","text":"The documentation is organised as follows.","category":"page"},{"location":"","page":"Index","title":"Index","text":"The Manual section contains all the useful information to use Dionysos as a user.\nThe Solvers section contains a few examples of solving problems with Dionysos. Start with Getting started if you want to get familiar with Dionysos.\nThe Utils section contains some examples of basic Dionysos functions.\nThe API Reference sections contains all the functions that we currently use in Dionysos. \nThe Developer Docs section is dedicated to the contributors to Dionysos developement. ","category":"page"},{"location":"#Need-help?","page":"Index","title":"Need help?","text":"","category":"section"},{"location":"","page":"Index","title":"Index","text":"If you need help, open an issue on Github.","category":"page"},{"location":"#ERC-sponsor","page":"Index","title":"ERC sponsor","text":"","category":"section"},{"location":"","page":"Index","title":"Index","text":"This project has received funding from the European Research Council (ERC) under the European Union's Horizon 2020 research and innovation programme under grant agreement No 864017 - L2C.","category":"page"},{"location":"","page":"Index","title":"Index","text":"<img class=\"display-light-only\" src=\"assets/logo_erc_white.jpg\" alt=\"ERC logo\"/>\n<img class=\"display-dark-only\" src=\"assets/logo_erc_black.jpg\" alt=\"ERC logo\"/>","category":"page"}]
}
